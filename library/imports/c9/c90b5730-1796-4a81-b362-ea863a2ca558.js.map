{"version":3,"sources":["assets\\scripts\\CPlayer.js"],"names":["Types","require","Utility","CPlayer","cc","Class","Component","properties","avatar","Node","displayName","Label","gold","spriteAvatar","type","SpriteFrame","layerCard","imgPass","progressBar","ProgressBar","headProgressBar","ParticleSystem","backCard","Sprite","lbNumCard","ctor","player","gameController","cards","_isMyTurn","_numCard","onLoad","setMyTurn","string","name","formatMoneyFull","_loadCards","console","error","active","start","update","dt","progress","p","Vec2","rotate","node","setPosition","setGameController","setPlayer","index","updateUI","i","length","c","cardPrefab","getNewCard","cCard","getComponent","setCard","setOwner","getPositionCard","r","getRotationCard","angle","addChild","push","getNumCard","setLayerCard","onDiscard","cardPrefabs","isContain","id","len","card","unshift","splice","_updatePosCards","pos","getPosition","x","k","setPositionCenter","log","getRotationVia","num","y","startX","endX","maxOffsetX","offset","getPositionVia","getCirclePos","onPass","img","color","Color","GRAY","runAction","sequence","delayTime","callFunc","WHITE","bind","onTouchCard","event","owner","EventType","TOUCH_START","TOUCH_MOVE","isDraging","getParent","convertToNodeSpaceAR","getLocation","TOUCH_END","isSelected","TOUCH_CANCEL","onEnterTurn","b","setSuggest","stopSystem","resetSystem","onSuggestCard","l","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["var Types = require(\"Types\");\r\nvar Utility = require(\"Utility\");\r\n\r\nvar CPlayer = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        avatar:cc.Node,\r\n        displayName:cc.Label,\r\n        gold:cc.Label,\r\n        spriteAvatar:{\r\n            default:[],\r\n            type:[cc.SpriteFrame]\r\n        },\r\n        layerCard:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        imgPass:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        progressBar:{\r\n            default:null,\r\n            type:cc.ProgressBar\r\n        },\r\n        headProgressBar:{\r\n            default:null,\r\n            type:cc.ParticleSystem\r\n        },\r\n        backCard:{\r\n            default:null,\r\n            type:cc.Sprite\r\n        },\r\n        lbNumCard:{\r\n            default:null,\r\n            type:cc.Label\r\n        }\r\n    },\r\n    ctor:function(){\r\n        /** @type {Player}*/\r\n        this.player = null;\r\n        /** @type {GameController}*/\r\n        this.gameController = null;\r\n        /** @type {[cardPrefab]}*/\r\n        this.cards = [];\r\n        this._isMyTurn = false;\r\n        this._numCard = 0;\r\n    },\r\n    onLoad:function(){\r\n        this.setMyTurn(this._isMyTurn);\r\n        if(this.player){\r\n            this.displayName.string = this.player.name;\r\n            this.gold.string = Utility.formatMoneyFull(this.player.gold);\r\n\r\n            // var circleAvatar = this.avatar.getComponent(\"CCircleAvatar\");\r\n            // circleAvatar.changeAvatar(this.spriteAvatar[this.player.avatar]);\r\n\r\n            //loadCards\r\n            this._loadCards();\r\n        }else{\r\n            console.error(\"need load setPlayer info onLoad\");\r\n        }\r\n        if(this.imgPass){\r\n            this.imgPass.active = false;\r\n        }\r\n    },\r\n    start:function () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        if(this._isMyTurn){\r\n            var progressBar = this.progressBar;\r\n            var progress = progressBar.progress;\r\n            if(progress > 0){\r\n                progress -= (dt * 0.1);\r\n            }\r\n            progressBar.progress = progress;\r\n\r\n            var p = new cc.Vec2(0,75);\r\n            p = p.rotate(progress * 2 * 3.14);\r\n            this.headProgressBar.node.setPosition(p);\r\n        }\r\n    },\r\n\r\n    setGameController:function(gameController){\r\n        this.gameController = gameController;\r\n    },\r\n    setPlayer:function (player) {\r\n        this.player = player;\r\n        if(this.player.index !== 0){\r\n            this._numCard = 11;\r\n        }\r\n    },\r\n    updateUI:function () {\r\n\r\n    },\r\n    _loadCards:function () {\r\n        if(this.gameController){\r\n            var cards = this.player.cards;\r\n            for (var i = 0; i < cards.length; i++) {\r\n                var c = cards[i];\r\n                var cardPrefab = this.gameController.getNewCard();\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n\r\n                cCard.setCard(c);\r\n                cCard.index = (i);\r\n                cCard.setOwner(this);\r\n\r\n                var p = this.getPositionCard(cCard);\r\n                var r = this.getRotationCard(cCard);\r\n                cardPrefab.setPosition(p);\r\n                cardPrefab.angle = (-r);\r\n                this.layerCard.addChild(cardPrefab);\r\n                this.cards.push(cardPrefab);\r\n            }\r\n            this.lbNumCard.string = this.getNumCard();\r\n        }else{\r\n            console.error(\"don't have GameControler in Player, so can't create newCard\");\r\n        }\r\n    },\r\n    setLayerCard:function(layerCard){\r\n        this.layerCard = layerCard;\r\n    },\r\n    onDiscard:function(cards){\r\n        this.setMyTurn(false);\r\n        if(this.layerCard == null){\r\n            console.error(\"you need add layerCard to player beforeDiscard\");\r\n            return [];\r\n        }\r\n        var cardPrefabs = [];\r\n        if(this.player && this.player.index === 0){\r\n            var isContain = function (c) {\r\n                for (var i = 0; i < cards.length; i++) {\r\n                    if(c.id=== cards[i].id){\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            var len = this.cards.length;\r\n            for (var i = len - 1; i >= 0; i--) {\r\n                var cardPrefab = this.cards[i];\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n                if(isContain(cCard.card)){\r\n                    cardPrefabs.unshift(cardPrefab);\r\n                    this.cards.splice(i,1);\r\n                    this.player.cards.splice(i,1);\r\n                }\r\n            }\r\n            this._updatePosCards();\r\n        }else{\r\n            var pos = this.node.getPosition();\r\n            pos.x += this.backCard.node.getPosition().x;\r\n            for (var k = 0; k < cards.length; k++) {\r\n                var cardPrefab = this.gameController.getNewCard();\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n                cCard.setCard(cards[k]);\r\n                cardPrefab.angle = 0;\r\n                cCard.setPositionCenter(pos);\r\n                cardPrefabs.push(cardPrefab);\r\n                this.layerCard.addChild(cardPrefab);\r\n            }\r\n            this._numCard -= cards.length;\r\n        }\r\n        this.lbNumCard.string = this.getNumCard();\r\n        return cardPrefabs;\r\n    },\r\n    _updatePosCards:function(){\r\n        console.log(\"_updatePosCards\");\r\n        if(this.gameController){\r\n            var cards = this.cards;\r\n            for (var i = 0; i < cards.length; i++) {\r\n                var cardPrefab = cards[i];\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n\r\n                cCard.index = (i);\r\n\r\n                var p = this.getPositionCard(cCard);\r\n                var r = this.getRotationCard(cCard);\r\n                cardPrefab.setPosition(p);\r\n                cardPrefab.angle = (-r);\r\n            }\r\n        }else{\r\n            console.error(\"don't have GameControler in Player, so can't create newCard\");\r\n        }\r\n    },\r\n\r\n    getNumCard:function(){\r\n        if(this.player){\r\n            if(this.player.index !== 0){\r\n                return this._numCard;\r\n            }\r\n            return this.player.cards.length;\r\n        }\r\n        return 1;\r\n    },\r\n    getRotationCard:function (cCard) {\r\n        var index = cCard.index;\r\n        return this.getRotationVia(index);\r\n    },\r\n\r\n    getRotationVia:function(index){\r\n        var num = this.getNumCard();\r\n        var y = 0;\r\n        var startX = -95;\r\n        var endX = 75;\r\n        // var startX = -60;\r\n        // var endX = 48;\r\n        var maxOffsetX = num < 7 ? 20 : 50;\r\n        var offset = (endX - startX) / (num - 1);\r\n        if(offset > maxOffsetX) offset = maxOffsetX;\r\n        //re-call startX;\r\n        startX = startX +  (endX - startX - (offset *(num - 1)))/2;\r\n        return startX + (offset * index);\r\n    },\r\n    /**\r\n     *\r\n     * @param cCard {CCard}\r\n     */\r\n    getPositionCard:function (cCard){\r\n        var index = cCard.index;\r\n        return this.getPositionVia(index);\r\n    },\r\n    getPositionVia:function(index){\r\n        var num = this.getNumCard();\r\n        var y = 0;\r\n        var startX = - 250;\r\n        var endX = 250;\r\n        var maxOffsetX = 5;\r\n        var offset = (endX - startX) / (num - 1);\r\n        if(offset > maxOffsetX) offset = maxOffsetX;\r\n        //re-call startX;\r\n        startX = startX +  (endX - startX - (offset *(num - 1)))/2;\r\n        return this.getCirclePos(new cc.Vec2(startX + (offset * index), y));\r\n    },\r\n    /**\r\n     *\r\n     * @param pos {cc.Vec2}\r\n     */\r\n    getCirclePos:function (pos) {\r\n        var x = pos.x;\r\n        pos.y = ((-1/100*(x*x))/1000 - 440);\r\n        return pos;\r\n    },\r\n    onPass:function () {\r\n        this.setMyTurn(false);\r\n        if(this.imgPass){\r\n            this.imgPass.active = true;\r\n            this.avatar.getComponent(\"CCircleAvatar\").img.node.color = cc.Color.GRAY;\r\n            this.node.runAction(cc.sequence(\r\n                cc.delayTime(2),\r\n                cc.callFunc(function () {\r\n                    this.imgPass.active = false;\r\n                    this.avatar.getComponent(\"CCircleAvatar\").img.node.color = cc.Color.WHITE;\r\n                }.bind(this))\r\n            ))\r\n        }\r\n    },\r\n    /**\r\n     *\r\n     * @param event {cc.EventTouch}\r\n     * @param card {Card}\r\n     */\r\n    onTouchCard:function (event,card,owner) {\r\n        switch (event.type) {\r\n            case cc.Node.EventType.TOUCH_START:\r\n                break;\r\n            case cc.Node.EventType.TOUCH_MOVE:\r\n                card.isDraging = true;\r\n                var pos = card.node.getParent().convertToNodeSpaceAR(event.getLocation());\r\n                card.node.setPosition(pos);\r\n                break;\r\n            case cc.Node.EventType.TOUCH_END:\r\n                card.isDraging = false;\r\n                card.isSelected = !card.isSelected;\r\n                card.node.setPosition(this.getPositionCard(card));\r\n                break;\r\n            case cc.Node.EventType.TOUCH_CANCEL:\r\n                card.isDraging = false;\r\n                card.node.setPosition(this.getPositionCard(card));\r\n                break;\r\n        }\r\n    },\r\n    onEnterTurn:function () {\r\n        if(this.player.index === 0) return;\r\n        this.progressBar.progress = 1;\r\n        this.setMyTurn(true);\r\n    },\r\n    setMyTurn:function (b) {\r\n        var index = 1;\r\n        console.log(\"come:\" + index++);\r\n        this._isMyTurn = b;\r\n        console.log(\"come:\" + index++);\r\n        this.progressBar.node.active = b;\r\n        console.log(\"come:\" + index++);\r\n        var len = this.cards.length;\r\n        for (var i = 0; i < len; i++) {\r\n            var cardPrefab = this.cards[i];\r\n            var cCard = cardPrefab.getComponent(\"CCard\");\r\n            cCard.setSuggest(true);\r\n        }\r\n        console.log(\"come:\" + index++);\r\n        if(!b){\r\n            this.headProgressBar.stopSystem();\r\n        }else{\r\n            this.headProgressBar.resetSystem();\r\n        }\r\n        console.log(\"come:\" + index++);\r\n        // this.headProgressBar.active = b;\r\n    },\r\n    onSuggestCard:function (cards) {\r\n        var isContain = function (card) {\r\n            var l = cards.length;\r\n            for (var i = 0; i < l; i++) {\r\n                if(cards[i].id === card.id){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        var len = this.cards.length;\r\n        for (var i = 0; i < len; i++) {\r\n            var cardPrefab = this.cards[i];\r\n            var cCard = cardPrefab.getComponent(\"CCard\");\r\n            cCard.setSuggest(isContain(cCard.card));\r\n        }\r\n    }\r\n    \r\n});\r\nmodule.exports = CPlayer;\r\n"]}