{"version":3,"sources":["assets\\scripts\\CPlayer.js"],"names":["Types","require","Utility","CPlayer","cc","Class","Component","properties","avatar","Node","displayName","Label","gold","spriteAvatar","type","SpriteFrame","layerCard","imgPass","progressBar","ProgressBar","ctor","player","gameController","cards","_isMyTurn","onLoad","setMyTurn","string","name","formatMoneyFull","_loadCards","console","error","active","start","update","dt","progress","setGameController","setPlayer","updateUI","i","length","c","cardPrefab","getNewCard","cCard","getComponent","setCard","index","setOwner","p","getPositionCard","r","getRotationCard","setPosition","angle","addChild","push","setLayerCard","onDiscard","cardPrefabs","isContain","id","len","card","unshift","splice","_updatePosCards","k","setPositionCenter","node","getPosition","log","getNumCard","getRotationVia","num","y","startX","endX","maxOffsetX","offset","getPositionVia","getCirclePos","Vec2","pos","x","onPass","runAction","sequence","delayTime","callFunc","bind","onTouchCard","event","owner","EventType","TOUCH_START","TOUCH_MOVE","isDraging","getParent","convertToNodeSpaceAR","getLocation","TOUCH_END","isSelected","TOUCH_CANCEL","onEnterTurn","b","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["var Types = require(\"Types\");\r\nvar Utility = require(\"Utility\");\r\n\r\nvar CPlayer = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        avatar:cc.Node,\r\n        displayName:cc.Label,\r\n        gold:cc.Label,\r\n        spriteAvatar:{\r\n            default:[],\r\n            type:[cc.SpriteFrame]\r\n        },\r\n        layerCard:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        imgPass:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        progressBar:{\r\n            default:null,\r\n            type:cc.ProgressBar\r\n        }\r\n    },\r\n    ctor:function(){\r\n        /** @type {Player}*/\r\n        this.player = null;\r\n        /** @type {GameController}*/\r\n        this.gameController = null;\r\n        this.cards = [];\r\n        this._isMyTurn = false;\r\n    },\r\n    onLoad:function(){\r\n        this.setMyTurn(this._isMyTurn);\r\n        if(this.player){\r\n            this.displayName.string = this.player.name;\r\n            this.gold.string = Utility.formatMoneyFull(this.player.gold);\r\n\r\n            // var circleAvatar = this.avatar.getComponent(\"CCircleAvatar\");\r\n            // circleAvatar.changeAvatar(this.spriteAvatar[this.player.avatar]);\r\n\r\n            //loadCards\r\n            this._loadCards();\r\n        }else{\r\n            console.error(\"need load setPlayer info onLoad\");\r\n        }\r\n        if(this.imgPass){\r\n            this.imgPass.active = false;\r\n        }\r\n    },\r\n    start:function () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        if(this._isMyTurn){\r\n            var progressBar = this.progressBar;\r\n            var progress = progressBar.progress;\r\n            if(progress > 0){\r\n                progress -= (dt * 0.1);\r\n            }\r\n            progressBar.progress = progress;\r\n        }\r\n    },\r\n\r\n    setGameController:function(gameController){\r\n        this.gameController = gameController;\r\n    },\r\n    setPlayer:function (player) {\r\n        this.player = player;\r\n    },\r\n    updateUI:function () {\r\n\r\n    },\r\n    _loadCards:function () {\r\n        if(this.gameController){\r\n            var cards = this.player.cards;\r\n            for (var i = 0; i < cards.length; i++) {\r\n                var c = cards[i];\r\n                var cardPrefab = this.gameController.getNewCard();\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n\r\n                cCard.setCard(c);\r\n                cCard.index = (i);\r\n                cCard.setOwner(this);\r\n\r\n                var p = this.getPositionCard(cCard);\r\n                var r = this.getRotationCard(cCard);\r\n                cardPrefab.setPosition(p);\r\n                cardPrefab.angle = (-r);\r\n                this.layerCard.addChild(cardPrefab);\r\n                this.cards.push(cardPrefab);\r\n            }\r\n        }else{\r\n            console.error(\"don't have GameControler in Player, so can't create newCard\");\r\n        }\r\n    },\r\n    setLayerCard:function(layerCard){\r\n        this.layerCard = layerCard;\r\n    },\r\n    onDiscard:function(cards){\r\n        this.setMyTurn(false);\r\n        if(this.layerCard == null){\r\n            console.error(\"you need add layerCard to player beforeDiscard\");\r\n            return [];\r\n        }\r\n        var cardPrefabs = [];\r\n        if(this.player && this.player.index === 0){\r\n            var isContain = function (c) {\r\n                for (var i = 0; i < cards.length; i++) {\r\n                    if(c.id=== cards[i].id){\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            var len = this.cards.length;\r\n            for (var i = len - 1; i >= 0; i--) {\r\n                var cardPrefab = this.cards[i];\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n                if(isContain(cCard.card)){\r\n                    cardPrefabs.unshift(cardPrefab);\r\n                    this.cards.splice(i,1);\r\n                    this.player.cards.splice(i,1);\r\n                }\r\n            }\r\n            this._updatePosCards();\r\n        }else{\r\n            for (var k = 0; k < cards.length; k++) {\r\n                var cardPrefab = this.gameController.getNewCard();\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n                cCard.setCard(cards[k]);\r\n                cardPrefab.angle = 0;\r\n                cCard.setPositionCenter(this.node.getPosition());\r\n                cardPrefabs.push(cardPrefab);\r\n                this.layerCard.addChild(cardPrefab);\r\n            }\r\n        }\r\n        return cardPrefabs;\r\n    },\r\n    _updatePosCards:function(){\r\n        console.log(\"_updatePosCards\");\r\n        if(this.gameController){\r\n            var cards = this.cards;\r\n            for (var i = 0; i < cards.length; i++) {\r\n                var cardPrefab = cards[i];\r\n                var cCard = cardPrefab.getComponent(\"CCard\");\r\n\r\n                cCard.index = (i);\r\n\r\n                var p = this.getPositionCard(cCard);\r\n                var r = this.getRotationCard(cCard);\r\n                cardPrefab.setPosition(p);\r\n                cardPrefab.angle = (-r);\r\n            }\r\n        }else{\r\n            console.error(\"don't have GameControler in Player, so can't create newCard\");\r\n        }\r\n    },\r\n\r\n    getNumCard:function(){\r\n        if(this.player){\r\n            return this.player.cards.length;\r\n        }\r\n        return 1;\r\n    },\r\n    getRotationCard:function (cCard) {\r\n        var index = cCard.index;\r\n        return this.getRotationVia(index);\r\n    },\r\n\r\n    getRotationVia:function(index){\r\n        var num = this.getNumCard();\r\n        var y = 0;\r\n        var startX = -60;\r\n        var endX = 48;\r\n        var maxOffsetX = 12;\r\n        var offset = (endX - startX) / (num - 1);\r\n        if(offset > maxOffsetX) offset = maxOffsetX;\r\n        //re-call startX;\r\n        startX = startX +  (endX - startX - (offset *(num - 1)))/2;\r\n        return startX + (offset * index);\r\n    },\r\n    /**\r\n     *\r\n     * @param cCard {CCard}\r\n     */\r\n    getPositionCard:function (cCard){\r\n        var index = cCard.index;\r\n        return this.getPositionVia(index);\r\n    },\r\n    getPositionVia:function(index){\r\n        var num = this.getNumCard();\r\n        var y = 0;\r\n        var startX = - 250;\r\n        var endX = 250;\r\n        var maxOffsetX = 5;\r\n        var offset = (endX - startX) / (num - 1);\r\n        if(offset > maxOffsetX) offset = maxOffsetX;\r\n        //re-call startX;\r\n        startX = startX +  (endX - startX - (offset *(num - 1)))/2;\r\n        return this.getCirclePos(new cc.Vec2(startX + (offset * index), y));\r\n    },\r\n    /**\r\n     *\r\n     * @param pos {cc.Vec2}\r\n     */\r\n    getCirclePos:function (pos) {\r\n        var x = pos.x;\r\n        pos.y = (-1/250*(x*x) - 450 + 120);\r\n        return pos;\r\n    },\r\n    onPass:function () {\r\n        this.setMyTurn(false);\r\n        if(this.imgPass){\r\n            this.imgPass.active = true;\r\n            this.node.runAction(cc.sequence(\r\n                cc.delayTime(2),\r\n                cc.callFunc(function () {\r\n                    this.imgPass.active = false;\r\n                }.bind(this))\r\n            ))\r\n        }\r\n    },\r\n    /**\r\n     *\r\n     * @param event {cc.EventTouch}\r\n     * @param card {Card}\r\n     */\r\n    onTouchCard:function (event,card,owner) {\r\n        switch (event.type) {\r\n            case cc.Node.EventType.TOUCH_START:\r\n                break;\r\n            case cc.Node.EventType.TOUCH_MOVE:\r\n                card.isDraging = true;\r\n                var pos = card.node.getParent().convertToNodeSpaceAR(event.getLocation());\r\n                card.node.setPosition(pos);\r\n                break;\r\n            case cc.Node.EventType.TOUCH_END:\r\n                card.isDraging = false;\r\n                card.isSelected = !card.isSelected;\r\n                card.node.setPosition(this.getPositionCard(card));\r\n                break;\r\n            case cc.Node.EventType.TOUCH_CANCEL:\r\n                card.isDraging = false;\r\n                card.node.setPosition(this.getPositionCard(card));\r\n                break;\r\n        }\r\n    },\r\n    onEnterTurn:function () {\r\n        if(this.player.index === 0) return;\r\n        this.progressBar.progress = 1;\r\n        this.setMyTurn(true);\r\n    },\r\n    setMyTurn:function (b) {\r\n        this._isMyTurn = b;\r\n        this.progressBar.node.active = b;\r\n    }\r\n});\r\nmodule.exports = CPlayer;\r\n"]}