{"version":3,"sources":["assets\\scripts\\CAudio.js"],"names":["require","SoundType","cc","Class","Component","properties","audioWelcome","type","AudioClip","audioDiscardStraight","audioDiscardFlush","audioDiscardCulu","soundDiscard","audioWin","soundCountDow","ctor","audioPool","onLoad","start","log","audioEngine","getMaxAudioInstance","id","play","push","playAudio","soundType","FULL_HOUSE","FLUSH","STRAIGHT","WELCOME","WIN"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;eACkBA,OAAO,CAAC,UAAD;IAApBC,qBAAAA;;AACLC,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,YAAY,EAAC;AACT,iBAAQ,IADC;AAETC,MAAAA,IAAI,EAACL,EAAE,CAACM;AAFC,KADL;AAKRC,IAAAA,oBAAoB,EAAC;AACjB,iBAAQ,IADS;AAEjBF,MAAAA,IAAI,EAACL,EAAE,CAACM;AAFS,KALb;AASRE,IAAAA,iBAAiB,EAAC;AACd,iBAAQ,IADM;AAEdH,MAAAA,IAAI,EAACL,EAAE,CAACM;AAFM,KATV;AAaRG,IAAAA,gBAAgB,EAAC;AACb,iBAAQ,IADK;AAEbJ,MAAAA,IAAI,EAACL,EAAE,CAACM;AAFK,KAbT;AAiBRI,IAAAA,YAAY,EAAC;AACT,iBAAQ,IADC;AAETL,MAAAA,IAAI,EAACL,EAAE,CAACM;AAFC,KAjBL;AAqBRK,IAAAA,QAAQ,EAAC;AACL,iBAAQ,IADH;AAELN,MAAAA,IAAI,EAACL,EAAE,CAACM;AAFH,KArBD;AAyBRM,IAAAA,aAAa,EAAC;AACV,iBAAQ,IADE;AAEVP,MAAAA,IAAI,EAACL,EAAE,CAACM;AAFE,KAzBN,CA6BR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3CQ,GAHP;AAgDLO,EAAAA,IAAI,EAAC,gBAAU;AACX,SAAKC,SAAL,GAAiB,EAAjB;AACH,GAlDI;AAmDL;AAEAC,EAAAA,MArDK,oBAqDK,CAAE,CArDP;AAuDLC,EAAAA,KAvDK,mBAuDI;AACLhB,IAAAA,EAAE,CAACiB,GAAH,CAAO,MAAP;AACAjB,IAAAA,EAAE,CAACkB,WAAH,CAAeC,mBAAf;AACA,QAAIC,EAAE,GAAGpB,EAAE,CAACkB,WAAH,CAAeG,IAAf,CAAoB,KAAKjB,YAAzB,EAAuC,KAAvC,EAA8C,CAA9C,CAAT;AACA,SAAKU,SAAL,CAAeQ,IAAf,CAAoBF,EAApB;AACH,GA5DI;AA6DLG,EAAAA,SAAS,EAAC,mBAAUC,SAAV,EAAqB;AAC3B,YAAQA,SAAR;AACI,WAAKzB,SAAS,CAAC0B,UAAf;AACIzB,QAAAA,EAAE,CAACkB,WAAH,CAAeG,IAAf,CAAoB,KAAKZ,gBAAzB,EAA2C,KAA3C,EAAkD,CAAlD;AACA;;AACJ,WAAKV,SAAS,CAAC2B,KAAf;AACI1B,QAAAA,EAAE,CAACkB,WAAH,CAAeG,IAAf,CAAoB,KAAKb,iBAAzB,EAA4C,KAA5C,EAAmD,CAAnD;AACA;;AACJ,WAAKT,SAAS,CAAC4B,QAAf;AACI3B,QAAAA,EAAE,CAACkB,WAAH,CAAeG,IAAf,CAAoB,KAAKd,oBAAzB,EAA+C,KAA/C,EAAsD,CAAtD;AACA;;AACJ,WAAKR,SAAS,CAAC6B,OAAf;AACI5B,QAAAA,EAAE,CAACkB,WAAH,CAAeG,IAAf,CAAoB,KAAKjB,YAAzB,EAAuC,KAAvC,EAA8C,CAA9C;AACA;;AACJ,WAAKL,SAAS,CAAC8B,GAAf;AACI7B,QAAAA,EAAE,CAACkB,WAAH,CAAeG,IAAf,CAAoB,KAAKV,QAAzB,EAAmC,KAAnC,EAA0C,CAA1C;AACA;AAfR;AAkBH,GAhFI,CAiFL;;AAjFK,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\nvar {SoundType} = require(\"GameFake\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        audioWelcome:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        },\r\n        audioDiscardStraight:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        },\r\n        audioDiscardFlush:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        },\r\n        audioDiscardCulu:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        },\r\n        soundDiscard:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        },\r\n        audioWin:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        },\r\n        soundCountDow:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        }\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n    ctor:function(){\r\n        this.audioPool = [];\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {},\r\n\r\n    start () {\r\n        cc.log(\"play\");\r\n        cc.audioEngine.getMaxAudioInstance();\r\n        var id = cc.audioEngine.play(this.audioWelcome, false, 1);\r\n        this.audioPool.push(id);\r\n    },\r\n    playAudio:function (soundType) {\r\n        switch (soundType) {\r\n            case SoundType.FULL_HOUSE:\r\n                cc.audioEngine.play(this.audioDiscardCulu, false, 1);\r\n                break;\r\n            case SoundType.FLUSH:\r\n                cc.audioEngine.play(this.audioDiscardFlush, false, 1);\r\n                break;\r\n            case SoundType.STRAIGHT:\r\n                cc.audioEngine.play(this.audioDiscardStraight, false, 1);\r\n                break;\r\n            case SoundType.WELCOME:\r\n                cc.audioEngine.play(this.audioWelcome, false, 1);\r\n                break;\r\n            case SoundType.WIN:\r\n                cc.audioEngine.play(this.audioWin, false, 1);\r\n                break;\r\n\r\n        }\r\n    }\r\n    // update (dt) {},\r\n});\r\n"]}