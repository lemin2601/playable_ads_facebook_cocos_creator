
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/CEffectWin.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c3f96EHNXtD9KukPp20CQBY', 'CEffectWin');
// scripts/CEffectWin.js

"use strict";

var Utility = require("Utility");

cc.Class({
  "extends": cc.Component,
  properties: {
    spine: {
      "default": null,
      type: cc.Node
    },
    lbLose1: {
      "default": null,
      type: cc.Label
    },
    lbLose2: {
      "default": null,
      type: cc.Label
    },
    imgLose1: {
      "default": null,
      type: cc.Sprite
    },
    imgLose2: {
      "default": null,
      type: cc.Sprite
    },
    lbWin: {
      "default": null,
      type: cc.Label
    },
    lbPot: {
      "default": null,
      type: cc.Label
    },
    player1: {
      "default": null,
      type: cc.Node
    },
    player2: {
      "default": null,
      type: cc.Node
    },
    emotions: {
      "default": [],
      type: [cc.Node]
    }
  },
  ctor: function ctor() {
    this.gameController = null;
  },
  // onLoad () {},
  // start () {},
  // update (dt) {},
  onEnable: function onEnable() {
    this._playEffectX8();

    this._playEffectLabelGold();

    this._playAllEmotions();

    this._delayShowCHPlay();
  },
  showNodeCHPlay: function showNodeCHPlay() {
    this.gameController.showNodeCHPlay();
  },
  _playAllEmotions: function _playAllEmotions() {
    function playEmo(emo) {
      if (emo) {
        var spine = emo.getComponent('sp.Skeleton');
        spine.setCompleteListener(function (trackEntry) {
          emo.active = false;
        });
        setTimeout(function () {
          emo.active = true;
          spine.setAnimation(0, 'animation', false);
        }, 1000);
      }
    }

    var l = this.emotions.length;

    for (var i = 0; i < l; i++) {
      var emo = this.emotions[i];
      playEmo(emo);
    }
  },
  _playEffectX8: function _playEffectX8() {
    var emo = this.spine;
    var spine = emo.getComponent('sp.Skeleton');
    spine.clearTracks();
    spine.setCompleteListener(function (trackEntry) {// spine.clearTracks();
      // emo.active = false;
    });
    emo.active = true;
    spine.setAnimation(0, 'animation', false);
  },
  _playEffectLabelGold: function _playEffectLabelGold() {
    var lose1 = 47000000;
    var lose2 = 58000000;
    var pot = 40000000;
    var win = pot + lose1 + lose2;

    function hideLabelonDone(label) {
      label.node.active = false;
    }

    Utility.runUpdateGold(this.lbLose1, 0, -lose1, undefined, undefined, hideLabelonDone, undefined, "", "", "$");
    Utility.runUpdateGold(this.lbLose2, 0, -lose1, undefined, undefined, hideLabelonDone, undefined, "", "", "$");
    Utility.runUpdateGold(this.lbWin, 0, win, undefined, undefined, undefined, undefined, "", "+", "$"); // Utility.runUpdateGold(this.lbLose2,0,-lose2);
    // Utility.runUpdateGold(this.lbWin,0,win);

    Utility.runUpdateGold(this.player1.getComponent("CPlayer").gold, lose1, 0);
    Utility.runUpdateGold(this.player2.getComponent("CPlayer").gold, lose2, 0);
  },
  _delayShowCHPlay: function _delayShowCHPlay() {
    this.node.runAction(cc.sequence(cc.delayTime(4), cc.callFunc(function () {
      this.imgLose1.node.active = false;
      this.imgLose2.node.active = false;
      this.lbWin.node.active = false;
      this.showNodeCHPlay();
    }, this)));
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,