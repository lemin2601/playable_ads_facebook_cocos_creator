
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/CPlayer.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c90b5cwF5ZKgbNi6oY6LKVY', 'CPlayer');
// scripts/CPlayer.js

"use strict";

var Types = require("Types");

var Utility = require("Utility");

var CPlayer = cc.Class({
  "extends": cc.Component,
  properties: {
    avatar: cc.Node,
    displayName: cc.Label,
    gold: cc.Label,
    spriteAvatar: {
      "default": [],
      type: [cc.SpriteFrame]
    },
    layerCard: {
      "default": null,
      type: cc.Node
    },
    imgPass: {
      "default": null,
      type: cc.Node
    },
    progressBar: {
      "default": null,
      type: cc.ProgressBar
    },
    headProgressBar: {
      "default": null,
      type: cc.ParticleSystem
    },
    backCard: {
      "default": null,
      type: cc.Sprite
    },
    lbNumCard: {
      "default": null,
      type: cc.Label
    }
  },
  ctor: function ctor() {
    /** @type {Player}*/
    this.player = null;
    /** @type {GameController}*/

    this.gameController = null;
    /** @type {[cardPrefab]}*/

    this.cards = [];
    this._isMyTurn = false;
    this._numCard = 0;
  },
  onLoad: function onLoad() {
    this.setMyTurn(this._isMyTurn);

    if (this.player) {
      if (this.player.index === 0) {
        this.backCard.node.active = false;
      }

      this.displayName.string = this.player.name;
      this.gold.string = Utility.formatMoneyFull(this.player.gold); // var circleAvatar = this.avatar.getComponent("CCircleAvatar");
      // circleAvatar.changeAvatar(this.spriteAvatar[this.player.avatar]);
      //loadCards

      this._loadCards();
    } else {
      console.error("need load setPlayer info onLoad");
    }

    if (this.imgPass) {
      this.imgPass.active = false;
    }
  },
  start: function start() {},
  update: function update(dt) {
    if (this._isMyTurn) {
      var progressBar = this.progressBar;
      var progress = progressBar.progress;

      if (progress > 0) {
        progress -= dt * 0.1;
      }

      progressBar.progress = progress;
      var p = new cc.Vec2(0, 75);
      p = p.rotate(progress * 2 * 3.14);
      this.headProgressBar.node.setPosition(p);
    }
  },
  setGameController: function setGameController(gameController) {
    this.gameController = gameController;
  },
  setPlayer: function setPlayer(player) {
    this.player = player;

    if (this.player.index !== 0) {
      this._numCard = 11;
    }
  },
  updateUI: function updateUI() {},
  _loadCards: function _loadCards() {
    var midIndex = this.getNumCard() / 2;
    var midPos = this.getPositionVia(midIndex);
    var midRot = this.getRotationVia(midIndex);

    if (this.gameController) {
      var cards = this.player.cards;

      for (var i = 0; i < cards.length; i++) {
        var c = cards[i];
        var cardPrefab = this.gameController.getNewCard();
        var cCard = cardPrefab.getComponent("CCard");
        cCard.setCard(c);
        cCard.index = i;
        cCard.setOwner(this);
        var p = this.getPositionCard(cCard);
        var r = this.getRotationCard(cCard); // cardPrefab.setPosition(p);
        // cardPrefab.angle = (-r);

        cardPrefab.setPosition(midPos);
        cardPrefab.angle = -midRot;
        cardPrefab.runAction(cc.spawn(cc.moveTo(0.6, p.x, p.y), cc.rotateTo(0.6, r)));
        this.layerCard.addChild(cardPrefab);
        this.cards.push(cardPrefab);
      }

      this.lbNumCard.string = this.getNumCard();
    } else {
      console.error("don't have GameControler in Player, so can't create newCard");
    }
  },
  setLayerCard: function setLayerCard(layerCard) {
    this.layerCard = layerCard;
  },
  onDiscard: function onDiscard(cards) {
    this.setMyTurn(false);

    if (this.layerCard == null) {
      console.error("you need add layerCard to player beforeDiscard");
      return [];
    }

    var cardPrefabs = [];

    if (this.player && this.player.index === 0) {
      var isContain = function isContain(c) {
        for (var i = 0; i < cards.length; i++) {
          if (c.id === cards[i].id) {
            return true;
          }
        }

        return false;
      };

      var len = this.cards.length;

      for (var i = len - 1; i >= 0; i--) {
        var cardPrefab = this.cards[i];
        var cCard = cardPrefab.getComponent("CCard");

        if (isContain(cCard.card)) {
          cardPrefabs.unshift(cardPrefab);
          this.cards.splice(i, 1);
          this.player.cards.splice(i, 1);
        }
      }

      this._updatePosCards();
    } else {
      var pos = this.node.getPosition();
      pos.x += this.backCard.node.getPosition().x;

      for (var k = 0; k < cards.length; k++) {
        var cardPrefab = this.gameController.getNewCard();
        var cCard = cardPrefab.getComponent("CCard");
        cCard.setCard(cards[k]);
        cardPrefab.angle = 0;
        cCard.setPositionCenter(pos);
        cardPrefabs.push(cardPrefab);
        this.layerCard.addChild(cardPrefab);
      }

      this._numCard -= cards.length;
    }

    this.lbNumCard.string = this.getNumCard();
    return cardPrefabs;
  },
  _updatePosCards: function _updatePosCards() {
    console.log("_updatePosCards");
    var midIndex = this.getNumCard() / 2;
    var midPos = this.getPositionVia(midIndex);
    var midRot = this.getRotationVia(midIndex);

    if (this.gameController) {
      var cards = this.cards;

      for (var i = 0; i < cards.length; i++) {
        var cardPrefab = cards[i];
        var cCard = cardPrefab.getComponent("CCard");
        cCard.index = i;
        var p = this.getPositionCard(cCard);
        var r = this.getRotationCard(cCard); // cardPrefab.setPosition(p);
        // cardPrefab.angle = (-r);
        // cardPrefab.setPosition(midPos);
        // cardPrefab.angle = -midRot;

        cardPrefab.runAction(cc.spawn(cc.moveTo(0.2, p.x, p.y), cc.rotateTo(0.2, r)));
      }
    } else {
      console.error("don't have GameControler in Player, so can't create newCard");
    }
  },
  getNumCard: function getNumCard() {
    if (this.player) {
      if (this.player.index !== 0) {
        return this._numCard;
      }

      return this.player.cards.length;
    }

    return 1;
  },
  getRotationCard: function getRotationCard(cCard) {
    var index = cCard.index;
    return this.getRotationVia(index);
  },
  getRotationVia: function getRotationVia(index) {
    var num = this.getNumCard();
    var y = 0;
    var startX = -95;
    var endX = 75; // var startX = -60;
    // var endX = 48;

    var maxOffsetX = num < 7 ? 20 : 50;
    var offset = (endX - startX) / (num - 1);
    if (offset > maxOffsetX) offset = maxOffsetX; //re-call startX;

    startX = startX + (endX - startX - offset * (num - 1)) / 2;
    return startX + offset * index;
  },

  /**
   *
   * @param cCard {CCard}
   */
  getPositionCard: function getPositionCard(cCard) {
    var index = cCard.index;
    return this.getPositionVia(index);
  },
  getPositionVia: function getPositionVia(index) {
    var num = this.getNumCard();
    var y = 0;
    var startX = -250;
    var endX = 250;
    var maxOffsetX = 5;
    var offset = (endX - startX) / (num - 1);
    if (offset > maxOffsetX) offset = maxOffsetX; //re-call startX;

    startX = startX + (endX - startX - offset * (num - 1)) / 2;
    return this.getCirclePos(new cc.Vec2(startX + offset * index, y));
  },

  /**
   *
   * @param pos {cc.Vec2}
   */
  getCirclePos: function getCirclePos(pos) {
    var x = pos.x;
    pos.y = -1 / 100 * (x * x) / 1000 - 440;
    return pos;
  },
  onPass: function onPass() {
    this.setMyTurn(false);

    if (this.imgPass) {
      this.imgPass.active = true;
      this.avatar.getComponent("CCircleAvatar").img.node.color = cc.Color.GRAY;
      this.node.runAction(cc.sequence(cc.delayTime(2), cc.callFunc(function () {
        this.imgPass.active = false;
        this.avatar.getComponent("CCircleAvatar").img.node.color = cc.Color.WHITE;
      }.bind(this))));
    }
  },

  /**
   *
   * @param event {cc.EventTouch}
   * @param card {Card}
   */
  onTouchCard: function onTouchCard(event, card, owner) {
    switch (event.type) {
      case cc.Node.EventType.TOUCH_START:
        break;

      case cc.Node.EventType.TOUCH_MOVE:
        card.isDraging = true;
        var pos = card.node.getParent().convertToNodeSpaceAR(event.getLocation());
        card.node.setPosition(pos);
        break;

      case cc.Node.EventType.TOUCH_END:
        card.isDraging = false;
        card.isSelected = !card.isSelected;
        card.node.setPosition(this.getPositionCard(card));
        break;

      case cc.Node.EventType.TOUCH_CANCEL:
        card.isDraging = false;
        card.node.setPosition(this.getPositionCard(card));
        break;
    }
  },
  onCloseTurn: function onCloseTurn() {
    cc.log("onCloseTurn:" + this.player.index);

    if (this.player.index === 0) {
      this.node.stopAllActions();
      this.node.runAction(cc.scaleTo(0.5, 1, 1)); // this.node.scale = 1;
    }
  },
  onEnterTurn: function onEnterTurn() {
    if (this.player.index === 0) {
      this.node.runAction(cc.scaleTo(0.5, 1.2, 1.2).easing(cc.easeBackOut())); // this.node.scale = 1.17;
      // return;
    }

    this.progressBar.progress = 1;
    this.setMyTurn(true);
  },
  setMyTurn: function setMyTurn(b) {
    this._isMyTurn = b;
    this.progressBar.node.active = b;
    var len = this.cards.length;

    for (var i = 0; i < len; i++) {
      var cardPrefab = this.cards[i];
      var cCard = cardPrefab.getComponent("CCard");
      cCard.setSuggest(true);
    }

    if (!b) {
      this.headProgressBar.stopSystem();
    } else {
      this.headProgressBar.resetSystem();
    } // this.headProgressBar.active = b;

  },
  onSuggestCard: function onSuggestCard(cards) {
    var isContain = function isContain(card) {
      var l = cards.length;

      for (var i = 0; i < l; i++) {
        if (cards[i].id === card.id) {
          return true;
        }
      }

      return false;
    };

    var len = this.cards.length;

    for (var i = 0; i < len; i++) {
      var cardPrefab = this.cards[i];
      var cCard = cardPrefab.getComponent("CCard");
      cCard.setSuggest(isContain(cCard.card));
    }
  }
});
module.exports = CPlayer;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL0NQbGF5ZXIuanMiXSwibmFtZXMiOlsiVHlwZXMiLCJyZXF1aXJlIiwiVXRpbGl0eSIsIkNQbGF5ZXIiLCJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImF2YXRhciIsIk5vZGUiLCJkaXNwbGF5TmFtZSIsIkxhYmVsIiwiZ29sZCIsInNwcml0ZUF2YXRhciIsInR5cGUiLCJTcHJpdGVGcmFtZSIsImxheWVyQ2FyZCIsImltZ1Bhc3MiLCJwcm9ncmVzc0JhciIsIlByb2dyZXNzQmFyIiwiaGVhZFByb2dyZXNzQmFyIiwiUGFydGljbGVTeXN0ZW0iLCJiYWNrQ2FyZCIsIlNwcml0ZSIsImxiTnVtQ2FyZCIsImN0b3IiLCJwbGF5ZXIiLCJnYW1lQ29udHJvbGxlciIsImNhcmRzIiwiX2lzTXlUdXJuIiwiX251bUNhcmQiLCJvbkxvYWQiLCJzZXRNeVR1cm4iLCJpbmRleCIsIm5vZGUiLCJhY3RpdmUiLCJzdHJpbmciLCJuYW1lIiwiZm9ybWF0TW9uZXlGdWxsIiwiX2xvYWRDYXJkcyIsImNvbnNvbGUiLCJlcnJvciIsInN0YXJ0IiwidXBkYXRlIiwiZHQiLCJwcm9ncmVzcyIsInAiLCJWZWMyIiwicm90YXRlIiwic2V0UG9zaXRpb24iLCJzZXRHYW1lQ29udHJvbGxlciIsInNldFBsYXllciIsInVwZGF0ZVVJIiwibWlkSW5kZXgiLCJnZXROdW1DYXJkIiwibWlkUG9zIiwiZ2V0UG9zaXRpb25WaWEiLCJtaWRSb3QiLCJnZXRSb3RhdGlvblZpYSIsImkiLCJsZW5ndGgiLCJjIiwiY2FyZFByZWZhYiIsImdldE5ld0NhcmQiLCJjQ2FyZCIsImdldENvbXBvbmVudCIsInNldENhcmQiLCJzZXRPd25lciIsImdldFBvc2l0aW9uQ2FyZCIsInIiLCJnZXRSb3RhdGlvbkNhcmQiLCJhbmdsZSIsInJ1bkFjdGlvbiIsInNwYXduIiwibW92ZVRvIiwieCIsInkiLCJyb3RhdGVUbyIsImFkZENoaWxkIiwicHVzaCIsInNldExheWVyQ2FyZCIsIm9uRGlzY2FyZCIsImNhcmRQcmVmYWJzIiwiaXNDb250YWluIiwiaWQiLCJsZW4iLCJjYXJkIiwidW5zaGlmdCIsInNwbGljZSIsIl91cGRhdGVQb3NDYXJkcyIsInBvcyIsImdldFBvc2l0aW9uIiwiayIsInNldFBvc2l0aW9uQ2VudGVyIiwibG9nIiwibnVtIiwic3RhcnRYIiwiZW5kWCIsIm1heE9mZnNldFgiLCJvZmZzZXQiLCJnZXRDaXJjbGVQb3MiLCJvblBhc3MiLCJpbWciLCJjb2xvciIsIkNvbG9yIiwiR1JBWSIsInNlcXVlbmNlIiwiZGVsYXlUaW1lIiwiY2FsbEZ1bmMiLCJXSElURSIsImJpbmQiLCJvblRvdWNoQ2FyZCIsImV2ZW50Iiwib3duZXIiLCJFdmVudFR5cGUiLCJUT1VDSF9TVEFSVCIsIlRPVUNIX01PVkUiLCJpc0RyYWdpbmciLCJnZXRQYXJlbnQiLCJjb252ZXJ0VG9Ob2RlU3BhY2VBUiIsImdldExvY2F0aW9uIiwiVE9VQ0hfRU5EIiwiaXNTZWxlY3RlZCIsIlRPVUNIX0NBTkNFTCIsIm9uQ2xvc2VUdXJuIiwic3RvcEFsbEFjdGlvbnMiLCJzY2FsZVRvIiwib25FbnRlclR1cm4iLCJlYXNpbmciLCJlYXNlQmFja091dCIsImIiLCJzZXRTdWdnZXN0Iiwic3RvcFN5c3RlbSIsInJlc2V0U3lzdGVtIiwib25TdWdnZXN0Q2FyZCIsImwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBQ0EsSUFBSUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFFQSxJQUFJRSxPQUFPLEdBQUdDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ25CLGFBQVNELEVBQUUsQ0FBQ0UsU0FETztBQUduQkMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLE1BQU0sRUFBQ0osRUFBRSxDQUFDSyxJQURGO0FBRVJDLElBQUFBLFdBQVcs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QUNnQyxNQUFkOztBQUNBLFdBQUssSUFBSUQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzRFLENBQXBCLEVBQXVCNUUsQ0FBQyxFQUF4QixFQUE0QjtBQUN4QixZQUFHL0IsS0FBSyxDQUFDK0IsQ0FBRCxDQUFMLENBQVN5QixFQUFULEtBQWdCRSxJQUFJLENBQUNGLEVBQXhCLEVBQTJCO0FBQ3ZCLGlCQUFPLElBQVA7QUFDSDtBQUNKOztBQUNELGFBQU8sS0FBUDtBQUNILEtBUkQ7O0FBU0EsUUFBSUMsR0FBRyxHQUFHLEtBQUt6RCxLQUFMLENBQVdnQyxNQUFyQjs7QUFDQSxTQUFLLElBQUlELENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcwQixHQUFwQixFQUF5QjFCLENBQUMsRUFBMUIsRUFBOEI7QUFDMUIsVUFBSUcsVUFBVSxHQUFHLEtBQUtsQyxLQUFMLENBQVcrQixDQUFYLENBQWpCO0FBQ0EsVUFBSUssS0FBSyxHQUFHRixVQUFVLENBQUNHLFlBQVgsQ0FBd0IsT0FBeEIsQ0FBWjtBQUNBRCxNQUFBQSxLQUFLLENBQUNtRSxVQUFOLENBQWlCaEQsU0FBUyxDQUFDbkIsS0FBSyxDQUFDc0IsSUFBUCxDQUExQjtBQUNIO0FBQ0o7QUFqV2tCLENBQVQsQ0FBZDtBQW9XQWtELE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRJLE9BQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVHlwZXMgPSByZXF1aXJlKFwiVHlwZXNcIik7XHJcbnZhciBVdGlsaXR5ID0gcmVxdWlyZShcIlV0aWxpdHlcIik7XHJcblxyXG52YXIgQ1BsYXllciA9IGNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgYXZhdGFyOmNjLk5vZGUsXHJcbiAgICAgICAgZGlzcGxheU5hbWU6Y2MuTGFiZWwsXHJcbiAgICAgICAgZ29sZDpjYy5MYWJlbCxcclxuICAgICAgICBzcHJpdGVBdmF0YXI6e1xyXG4gICAgICAgICAgICBkZWZhdWx0OltdLFxyXG4gICAgICAgICAgICB0eXBlOltjYy5TcHJpdGVGcmFtZV1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxheWVyQ2FyZDp7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbCxcclxuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbWdQYXNzOntcclxuICAgICAgICAgICAgZGVmYXVsdDpudWxsLFxyXG4gICAgICAgICAgICB0eXBlOmNjLk5vZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByb2dyZXNzQmFyOntcclxuICAgICAgICAgICAgZGVmYXVsdDpudWxsLFxyXG4gICAgICAgICAgICB0eXBlOmNjLlByb2dyZXNzQmFyXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoZWFkUHJvZ3Jlc3NCYXI6e1xyXG4gICAgICAgICAgICBkZWZhdWx0Om51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6Y2MuUGFydGljbGVTeXN0ZW1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJhY2tDYXJkOntcclxuICAgICAgICAgICAgZGVmYXVsdDpudWxsLFxyXG4gICAgICAgICAgICB0eXBlOmNjLlNwcml0ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGJOdW1DYXJkOntcclxuICAgICAgICAgICAgZGVmYXVsdDpudWxsLFxyXG4gICAgICAgICAgICB0eXBlOmNjLkxhYmVsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGN0b3I6ZnVuY3Rpb24oKXtcclxuICAgICAgICAvKiogQHR5cGUge1BsYXllcn0qL1xyXG4gICAgICAgIHRoaXMucGxheWVyID0gbnVsbDtcclxuICAgICAgICAvKiogQHR5cGUge0dhbWVDb250cm9sbGVyfSovXHJcbiAgICAgICAgdGhpcy5nYW1lQ29udHJvbGxlciA9IG51bGw7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtbY2FyZFByZWZhYl19Ki9cclxuICAgICAgICB0aGlzLmNhcmRzID0gW107XHJcbiAgICAgICAgdGhpcy5faXNNeVR1cm4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9udW1DYXJkID0gMDtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQ6ZnVuY3Rpb24oKXtcclxuICAgICAgICB0aGlzLnNldE15VHVybih0aGlzLl9pc015VHVybik7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5ZXIpe1xyXG4gICAgICAgICAgICBpZih0aGlzLnBsYXllci5pbmRleCA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tDYXJkLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5TmFtZS5zdHJpbmcgPSB0aGlzLnBsYXllci5uYW1lO1xyXG4gICAgICAgICAgICB0aGlzLmdvbGQuc3RyaW5nID0gVXRpbGl0eS5mb3JtYXRNb25leUZ1bGwodGhpcy5wbGF5ZXIuZ29sZCk7XHJcblxyXG4gICAgICAgICAgICAvLyB2YXIgY2lyY2xlQXZhdGFyID0gdGhpcy5hdmF0YXIuZ2V0Q29tcG9uZW50KFwiQ0NpcmNsZUF2YXRhclwiKTtcclxuICAgICAgICAgICAgLy8gY2lyY2xlQXZhdGFyLmNoYW5nZUF2YXRhcih0aGlzLnNwcml0ZUF2YXRhclt0aGlzLnBsYXllci5hdmF0YXJdKTtcclxuXHJcbiAgICAgICAgICAgIC8vbG9hZENhcmRzXHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRDYXJkcygpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwibmVlZCBsb2FkIHNldFBsYXllciBpbmZvIG9uTG9hZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5pbWdQYXNzKXtcclxuICAgICAgICAgICAgdGhpcy5pbWdQYXNzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdGFydDpmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGUgKGR0KSB7XHJcbiAgICAgICAgaWYodGhpcy5faXNNeVR1cm4pe1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3NCYXIgPSB0aGlzLnByb2dyZXNzQmFyO1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBwcm9ncmVzc0Jhci5wcm9ncmVzcztcclxuICAgICAgICAgICAgaWYocHJvZ3Jlc3MgPiAwKXtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzIC09IChkdCAqIDAuMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIucHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuXHJcbiAgICAgICAgICAgIHZhciBwID0gbmV3IGNjLlZlYzIoMCw3NSk7XHJcbiAgICAgICAgICAgIHAgPSBwLnJvdGF0ZShwcm9ncmVzcyAqIDIgKiAzLjE0KTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkUHJvZ3Jlc3NCYXIubm9kZS5zZXRQb3NpdGlvbihwKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNldEdhbWVDb250cm9sbGVyOmZ1bmN0aW9uKGdhbWVDb250cm9sbGVyKXtcclxuICAgICAgICB0aGlzLmdhbWVDb250cm9sbGVyID0gZ2FtZUNvbnRyb2xsZXI7XHJcbiAgICB9LFxyXG4gICAgc2V0UGxheWVyOmZ1bmN0aW9uIChwbGF5ZXIpIHtcclxuICAgICAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcclxuICAgICAgICBpZih0aGlzLnBsYXllci5pbmRleCAhPT0gMCl7XHJcbiAgICAgICAgICAgIHRoaXMuX251bUNhcmQgPSAxMTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlVUk6ZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIH0sXHJcbiAgICBfbG9hZENhcmRzOmZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbWlkSW5kZXggPSB0aGlzLmdldE51bUNhcmQoKS8yO1xyXG4gICAgICAgIHZhciBtaWRQb3MgPSB0aGlzLmdldFBvc2l0aW9uVmlhKG1pZEluZGV4KTtcclxuICAgICAgICB2YXIgbWlkUm90ID0gdGhpcy5nZXRSb3RhdGlvblZpYShtaWRJbmRleCk7XHJcbiAgICAgICAgaWYodGhpcy5nYW1lQ29udHJvbGxlcil7XHJcbiAgICAgICAgICAgIHZhciBjYXJkcyA9IHRoaXMucGxheWVyLmNhcmRzO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGNhcmRzW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcmRQcmVmYWIgPSB0aGlzLmdhbWVDb250cm9sbGVyLmdldE5ld0NhcmQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjQ2FyZCA9IGNhcmRQcmVmYWIuZ2V0Q29tcG9uZW50KFwiQ0NhcmRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgY0NhcmQuc2V0Q2FyZChjKTtcclxuICAgICAgICAgICAgICAgIGNDYXJkLmluZGV4ID0gKGkpO1xyXG4gICAgICAgICAgICAgICAgY0NhcmQuc2V0T3duZXIodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSB0aGlzLmdldFBvc2l0aW9uQ2FyZChjQ2FyZCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuZ2V0Um90YXRpb25DYXJkKGNDYXJkKTtcclxuICAgICAgICAgICAgICAgIC8vIGNhcmRQcmVmYWIuc2V0UG9zaXRpb24ocCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjYXJkUHJlZmFiLmFuZ2xlID0gKC1yKTtcclxuICAgICAgICAgICAgICAgIGNhcmRQcmVmYWIuc2V0UG9zaXRpb24obWlkUG9zKTtcclxuICAgICAgICAgICAgICAgIGNhcmRQcmVmYWIuYW5nbGUgPSAtbWlkUm90O1xyXG4gICAgICAgICAgICAgICAgY2FyZFByZWZhYi5ydW5BY3Rpb24oY2Muc3Bhd24oXHJcbiAgICAgICAgICAgICAgICAgICAgY2MubW92ZVRvKDAuNixwLngscC55KSxcclxuICAgICAgICAgICAgICAgICAgICBjYy5yb3RhdGVUbygwLjYscilcclxuICAgICAgICAgICAgICAgICkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllckNhcmQuYWRkQ2hpbGQoY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmRzLnB1c2goY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sYk51bUNhcmQuc3RyaW5nID0gdGhpcy5nZXROdW1DYXJkKCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJkb24ndCBoYXZlIEdhbWVDb250cm9sZXIgaW4gUGxheWVyLCBzbyBjYW4ndCBjcmVhdGUgbmV3Q2FyZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0TGF5ZXJDYXJkOmZ1bmN0aW9uKGxheWVyQ2FyZCl7XHJcbiAgICAgICAgdGhpcy5sYXllckNhcmQgPSBsYXllckNhcmQ7XHJcbiAgICB9LFxyXG4gICAgb25EaXNjYXJkOmZ1bmN0aW9uKGNhcmRzKXtcclxuICAgICAgICB0aGlzLnNldE15VHVybihmYWxzZSk7XHJcbiAgICAgICAgaWYodGhpcy5sYXllckNhcmQgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ5b3UgbmVlZCBhZGQgbGF5ZXJDYXJkIHRvIHBsYXllciBiZWZvcmVEaXNjYXJkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjYXJkUHJlZmFicyA9IFtdO1xyXG4gICAgICAgIGlmKHRoaXMucGxheWVyICYmIHRoaXMucGxheWVyLmluZGV4ID09PSAwKXtcclxuICAgICAgICAgICAgdmFyIGlzQ29udGFpbiA9IGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYy5pZD09PSBjYXJkc1tpXS5pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMuY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJkUHJlZmFiID0gdGhpcy5jYXJkc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBjQ2FyZCA9IGNhcmRQcmVmYWIuZ2V0Q29tcG9uZW50KFwiQ0NhcmRcIik7XHJcbiAgICAgICAgICAgICAgICBpZihpc0NvbnRhaW4oY0NhcmQuY2FyZCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRQcmVmYWJzLnVuc2hpZnQoY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJkcy5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5jYXJkcy5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVQb3NDYXJkcygpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5ub2RlLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIHBvcy54ICs9IHRoaXMuYmFja0NhcmQubm9kZS5nZXRQb3NpdGlvbigpLng7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY2FyZHMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJkUHJlZmFiID0gdGhpcy5nYW1lQ29udHJvbGxlci5nZXROZXdDYXJkKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY0NhcmQgPSBjYXJkUHJlZmFiLmdldENvbXBvbmVudChcIkNDYXJkXCIpO1xyXG4gICAgICAgICAgICAgICAgY0NhcmQuc2V0Q2FyZChjYXJkc1trXSk7XHJcbiAgICAgICAgICAgICAgICBjYXJkUHJlZmFiLmFuZ2xlID0gMDtcclxuICAgICAgICAgICAgICAgIGNDYXJkLnNldFBvc2l0aW9uQ2VudGVyKHBvcyk7XHJcbiAgICAgICAgICAgICAgICBjYXJkUHJlZmFicy5wdXNoKGNhcmRQcmVmYWIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllckNhcmQuYWRkQ2hpbGQoY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbnVtQ2FyZCAtPSBjYXJkcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGJOdW1DYXJkLnN0cmluZyA9IHRoaXMuZ2V0TnVtQ2FyZCgpO1xyXG4gICAgICAgIHJldHVybiBjYXJkUHJlZmFicztcclxuICAgIH0sXHJcbiAgICBfdXBkYXRlUG9zQ2FyZHM6ZnVuY3Rpb24oKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIl91cGRhdGVQb3NDYXJkc1wiKTtcclxuICAgICAgICB2YXIgbWlkSW5kZXggPSB0aGlzLmdldE51bUNhcmQoKS8yO1xyXG4gICAgICAgIHZhciBtaWRQb3MgPSB0aGlzLmdldFBvc2l0aW9uVmlhKG1pZEluZGV4KTtcclxuICAgICAgICB2YXIgbWlkUm90ID0gdGhpcy5nZXRSb3RhdGlvblZpYShtaWRJbmRleCk7XHJcbiAgICAgICAgaWYodGhpcy5nYW1lQ29udHJvbGxlcil7XHJcbiAgICAgICAgICAgIHZhciBjYXJkcyA9IHRoaXMuY2FyZHM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FyZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJkUHJlZmFiID0gY2FyZHNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgY0NhcmQgPSBjYXJkUHJlZmFiLmdldENvbXBvbmVudChcIkNDYXJkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNDYXJkLmluZGV4ID0gKGkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwID0gdGhpcy5nZXRQb3NpdGlvbkNhcmQoY0NhcmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmdldFJvdGF0aW9uQ2FyZChjQ2FyZCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjYXJkUHJlZmFiLnNldFBvc2l0aW9uKHApO1xyXG4gICAgICAgICAgICAgICAgLy8gY2FyZFByZWZhYi5hbmdsZSA9ICgtcik7XHJcbiAgICAgICAgICAgICAgICAvLyBjYXJkUHJlZmFiLnNldFBvc2l0aW9uKG1pZFBvcyk7XHJcbiAgICAgICAgICAgICAgICAvLyBjYXJkUHJlZmFiLmFuZ2xlID0gLW1pZFJvdDtcclxuICAgICAgICAgICAgICAgIGNhcmRQcmVmYWIucnVuQWN0aW9uKGNjLnNwYXduKFxyXG4gICAgICAgICAgICAgICAgICAgIGNjLm1vdmVUbygwLjIscC54LHAueSksXHJcbiAgICAgICAgICAgICAgICAgICAgY2Mucm90YXRlVG8oMC4yLHIpXHJcbiAgICAgICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZG9uJ3QgaGF2ZSBHYW1lQ29udHJvbGVyIGluIFBsYXllciwgc28gY2FuJ3QgY3JlYXRlIG5ld0NhcmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBnZXROdW1DYXJkOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5ZXIpe1xyXG4gICAgICAgICAgICBpZih0aGlzLnBsYXllci5pbmRleCAhPT0gMCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbnVtQ2FyZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH0sXHJcbiAgICBnZXRSb3RhdGlvbkNhcmQ6ZnVuY3Rpb24gKGNDYXJkKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gY0NhcmQuaW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Um90YXRpb25WaWEoaW5kZXgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRSb3RhdGlvblZpYTpmdW5jdGlvbihpbmRleCl7XHJcbiAgICAgICAgdmFyIG51bSA9IHRoaXMuZ2V0TnVtQ2FyZCgpO1xyXG4gICAgICAgIHZhciB5ID0gMDtcclxuICAgICAgICB2YXIgc3RhcnRYID0gLTk1O1xyXG4gICAgICAgIHZhciBlbmRYID0gNzU7XHJcbiAgICAgICAgLy8gdmFyIHN0YXJ0WCA9IC02MDtcclxuICAgICAgICAvLyB2YXIgZW5kWCA9IDQ4O1xyXG4gICAgICAgIHZhciBtYXhPZmZzZXRYID0gbnVtIDwgNyA/IDIwIDogNTA7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IChlbmRYIC0gc3RhcnRYKSAvIChudW0gLSAxKTtcclxuICAgICAgICBpZihvZmZzZXQgPiBtYXhPZmZzZXRYKSBvZmZzZXQgPSBtYXhPZmZzZXRYO1xyXG4gICAgICAgIC8vcmUtY2FsbCBzdGFydFg7XHJcbiAgICAgICAgc3RhcnRYID0gc3RhcnRYICsgIChlbmRYIC0gc3RhcnRYIC0gKG9mZnNldCAqKG51bSAtIDEpKSkvMjtcclxuICAgICAgICByZXR1cm4gc3RhcnRYICsgKG9mZnNldCAqIGluZGV4KTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY0NhcmQge0NDYXJkfVxyXG4gICAgICovXHJcbiAgICBnZXRQb3NpdGlvbkNhcmQ6ZnVuY3Rpb24gKGNDYXJkKXtcclxuICAgICAgICB2YXIgaW5kZXggPSBjQ2FyZC5pbmRleDtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQb3NpdGlvblZpYShpbmRleCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0UG9zaXRpb25WaWE6ZnVuY3Rpb24oaW5kZXgpe1xyXG4gICAgICAgIHZhciBudW0gPSB0aGlzLmdldE51bUNhcmQoKTtcclxuICAgICAgICB2YXIgeSA9IDA7XHJcbiAgICAgICAgdmFyIHN0YXJ0WCA9IC0gMjUwO1xyXG4gICAgICAgIHZhciBlbmRYID0gMjUwO1xyXG4gICAgICAgIHZhciBtYXhPZmZzZXRYID0gNTtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gKGVuZFggLSBzdGFydFgpIC8gKG51bSAtIDEpO1xyXG4gICAgICAgIGlmKG9mZnNldCA+IG1heE9mZnNldFgpIG9mZnNldCA9IG1heE9mZnNldFg7XHJcbiAgICAgICAgLy9yZS1jYWxsIHN0YXJ0WDtcclxuICAgICAgICBzdGFydFggPSBzdGFydFggKyAgKGVuZFggLSBzdGFydFggLSAob2Zmc2V0ICoobnVtIC0gMSkpKS8yO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENpcmNsZVBvcyhuZXcgY2MuVmVjMihzdGFydFggKyAob2Zmc2V0ICogaW5kZXgpLCB5KSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBvcyB7Y2MuVmVjMn1cclxuICAgICAqL1xyXG4gICAgZ2V0Q2lyY2xlUG9zOmZ1bmN0aW9uIChwb3MpIHtcclxuICAgICAgICB2YXIgeCA9IHBvcy54O1xyXG4gICAgICAgIHBvcy55ID0gKCgtMS8xMDAqKHgqeCkpLzEwMDAgLSA0NDApO1xyXG4gICAgICAgIHJldHVybiBwb3M7XHJcbiAgICB9LFxyXG4gICAgb25QYXNzOmZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNldE15VHVybihmYWxzZSk7XHJcbiAgICAgICAgaWYodGhpcy5pbWdQYXNzKXtcclxuICAgICAgICAgICAgdGhpcy5pbWdQYXNzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyLmdldENvbXBvbmVudChcIkNDaXJjbGVBdmF0YXJcIikuaW1nLm5vZGUuY29sb3IgPSBjYy5Db2xvci5HUkFZO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUucnVuQWN0aW9uKGNjLnNlcXVlbmNlKFxyXG4gICAgICAgICAgICAgICAgY2MuZGVsYXlUaW1lKDIpLFxyXG4gICAgICAgICAgICAgICAgY2MuY2FsbEZ1bmMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW1nUGFzcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF2YXRhci5nZXRDb21wb25lbnQoXCJDQ2lyY2xlQXZhdGFyXCIpLmltZy5ub2RlLmNvbG9yID0gY2MuQ29sb3IuV0hJVEU7XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpXHJcbiAgICAgICAgICAgICkpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudCB7Y2MuRXZlbnRUb3VjaH1cclxuICAgICAqIEBwYXJhbSBjYXJkIHtDYXJkfVxyXG4gICAgICovXHJcbiAgICBvblRvdWNoQ2FyZDpmdW5jdGlvbiAoZXZlbnQsY2FyZCxvd25lcikge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJUOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfTU9WRTpcclxuICAgICAgICAgICAgICAgIGNhcmQuaXNEcmFnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBjYXJkLm5vZGUuZ2V0UGFyZW50KCkuY29udmVydFRvTm9kZVNwYWNlQVIoZXZlbnQuZ2V0TG9jYXRpb24oKSk7XHJcbiAgICAgICAgICAgICAgICBjYXJkLm5vZGUuc2V0UG9zaXRpb24ocG9zKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORDpcclxuICAgICAgICAgICAgICAgIGNhcmQuaXNEcmFnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjYXJkLmlzU2VsZWN0ZWQgPSAhY2FyZC5pc1NlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgY2FyZC5ub2RlLnNldFBvc2l0aW9uKHRoaXMuZ2V0UG9zaXRpb25DYXJkKGNhcmQpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTDpcclxuICAgICAgICAgICAgICAgIGNhcmQuaXNEcmFnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjYXJkLm5vZGUuc2V0UG9zaXRpb24odGhpcy5nZXRQb3NpdGlvbkNhcmQoY2FyZCkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uQ2xvc2VUdXJuOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY2MubG9nKFwib25DbG9zZVR1cm46XCIgKyB0aGlzLnBsYXllci5pbmRleCk7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5ZXIuaW5kZXggPT09IDApe1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuc3RvcEFsbEFjdGlvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnJ1bkFjdGlvbihjYy5zY2FsZVRvKDAuNSwxLDEpKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5ub2RlLnNjYWxlID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAsXHJcbiAgICBvbkVudGVyVHVybjpmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5ZXIuaW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnJ1bkFjdGlvbihjYy5zY2FsZVRvKDAuNSwxLjIsMS4yKS5lYXNpbmcoY2MuZWFzZUJhY2tPdXQoKSkpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLm5vZGUuc2NhbGUgPSAxLjE3O1xyXG4gICAgICAgICAgICAvLyByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIucHJvZ3Jlc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuc2V0TXlUdXJuKHRydWUpO1xyXG4gICAgfSxcclxuICAgIHNldE15VHVybjpmdW5jdGlvbiAoYikge1xyXG4gICAgICAgIHRoaXMuX2lzTXlUdXJuID0gYjtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLm5vZGUuYWN0aXZlID0gYjtcclxuICAgICAgICB2YXIgbGVuID0gdGhpcy5jYXJkcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY2FyZFByZWZhYiA9IHRoaXMuY2FyZHNbaV07XHJcbiAgICAgICAgICAgIHZhciBjQ2FyZCA9IGNhcmRQcmVmYWIuZ2V0Q29tcG9uZW50KFwiQ0NhcmRcIik7XHJcbiAgICAgICAgICAgIGNDYXJkLnNldFN1Z2dlc3QodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCFiKXtcclxuICAgICAgICAgICAgdGhpcy5oZWFkUHJvZ3Jlc3NCYXIuc3RvcFN5c3RlbSgpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRQcm9ncmVzc0Jhci5yZXNldFN5c3RlbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLmhlYWRQcm9ncmVzc0Jhci5hY3RpdmUgPSBiO1xyXG4gICAgfSxcclxuICAgIG9uU3VnZ2VzdENhcmQ6ZnVuY3Rpb24gKGNhcmRzKSB7XHJcbiAgICAgICAgdmFyIGlzQ29udGFpbiA9IGZ1bmN0aW9uIChjYXJkKSB7XHJcbiAgICAgICAgICAgIHZhciBsID0gY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYoY2FyZHNbaV0uaWQgPT09IGNhcmQuaWQpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmNhcmRzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjYXJkUHJlZmFiID0gdGhpcy5jYXJkc1tpXTtcclxuICAgICAgICAgICAgdmFyIGNDYXJkID0gY2FyZFByZWZhYi5nZXRDb21wb25lbnQoXCJDQ2FyZFwiKTtcclxuICAgICAgICAgICAgY0NhcmQuc2V0U3VnZ2VzdChpc0NvbnRhaW4oY0NhcmQuY2FyZCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG59KTtcclxubW9kdWxlLmV4cG9ydHMgPSBDUGxheWVyO1xyXG4iXX0=