
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/CPlayer.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c90b5cwF5ZKgbNi6oY6LKVY', 'CPlayer');
// scripts/CPlayer.js

"use strict";

var Types = require("Types");

var Utility = require("Utility");

var CPlayer = cc.Class({
  "extends": cc.Component,
  properties: {
    avatar: cc.Node,
    displayName: cc.Label,
    gold: cc.Label,
    spriteAvatar: {
      "default": [],
      type: [cc.SpriteFrame]
    },
    layerCard: {
      "default": null,
      type: cc.Node
    },
    imgPass: {
      "default": null,
      type: cc.Node
    },
    progressBar: {
      "default": null,
      type: cc.ProgressBar
    },
    headProgressBar: {
      "default": null,
      type: cc.ParticleSystem
    },
    backCard: {
      "default": null,
      type: cc.Sprite
    },
    lbNumCard: {
      "default": null,
      type: cc.Label
    }
  },
  ctor: function ctor() {
    /** @type {Player}*/
    this.player = null;
    /** @type {GameController}*/

    this.gameController = null;
    /** @type {[cardPrefab]}*/

    this.cards = [];
    this._isMyTurn = false;
    this._numCard = 0;
  },
  onLoad: function onLoad() {
    this.setMyTurn(this._isMyTurn);

    if (this.player) {
      this.displayName.string = this.player.name;
      this.gold.string = Utility.formatMoneyFull(this.player.gold); // var circleAvatar = this.avatar.getComponent("CCircleAvatar");
      // circleAvatar.changeAvatar(this.spriteAvatar[this.player.avatar]);
      //loadCards

      this._loadCards();
    } else {
      console.error("need load setPlayer info onLoad");
    }

    if (this.imgPass) {
      this.imgPass.active = false;
    }
  },
  start: function start() {},
  update: function update(dt) {
    if (this._isMyTurn) {
      var progressBar = this.progressBar;
      var progress = progressBar.progress;

      if (progress > 0) {
        progress -= dt * 0.1;
      }

      progressBar.progress = progress;
      var p = new cc.Vec2(0, 75);
      p = p.rotate(progress * 2 * 3.14);
      this.headProgressBar.node.setPosition(p);
    }
  },
  setGameController: function setGameController(gameController) {
    this.gameController = gameController;
  },
  setPlayer: function setPlayer(player) {
    this.player = player;

    if (this.player.index !== 0) {
      this._numCard = 11;
    }
  },
  updateUI: function updateUI() {},
  _loadCards: function _loadCards() {
    if (this.gameController) {
      var cards = this.player.cards;

      for (var i = 0; i < cards.length; i++) {
        var c = cards[i];
        var cardPrefab = this.gameController.getNewCard();
        var cCard = cardPrefab.getComponent("CCard");
        cCard.setCard(c);
        cCard.index = i;
        cCard.setOwner(this);
        var p = this.getPositionCard(cCard);
        var r = this.getRotationCard(cCard);
        cardPrefab.setPosition(p);
        cardPrefab.angle = -r;
        this.layerCard.addChild(cardPrefab);
        this.cards.push(cardPrefab);
      }

      this.lbNumCard.string = this.getNumCard();
    } else {
      console.error("don't have GameControler in Player, so can't create newCard");
    }
  },
  setLayerCard: function setLayerCard(layerCard) {
    this.layerCard = layerCard;
  },
  onDiscard: function onDiscard(cards) {
    this.setMyTurn(false);

    if (this.layerCard == null) {
      console.error("you need add layerCard to player beforeDiscard");
      return [];
    }

    var cardPrefabs = [];

    if (this.player && this.player.index === 0) {
      var isContain = function isContain(c) {
        for (var i = 0; i < cards.length; i++) {
          if (c.id === cards[i].id) {
            return true;
          }
        }

        return false;
      };

      var len = this.cards.length;

      for (var i = len - 1; i >= 0; i--) {
        var cardPrefab = this.cards[i];
        var cCard = cardPrefab.getComponent("CCard");

        if (isContain(cCard.card)) {
          cardPrefabs.unshift(cardPrefab);
          this.cards.splice(i, 1);
          this.player.cards.splice(i, 1);
        }
      }

      this._updatePosCards();
    } else {
      var pos = this.node.getPosition();
      pos.x += this.backCard.node.getPosition().x;

      for (var k = 0; k < cards.length; k++) {
        var cardPrefab = this.gameController.getNewCard();
        var cCard = cardPrefab.getComponent("CCard");
        cCard.setCard(cards[k]);
        cardPrefab.angle = 0;
        cCard.setPositionCenter(pos);
        cardPrefabs.push(cardPrefab);
        this.layerCard.addChild(cardPrefab);
      }

      this._numCard -= cards.length;
    }

    this.lbNumCard.string = this.getNumCard();
    return cardPrefabs;
  },
  _updatePosCards: function _updatePosCards() {
    console.log("_updatePosCards");

    if (this.gameController) {
      var cards = this.cards;

      for (var i = 0; i < cards.length; i++) {
        var cardPrefab = cards[i];
        var cCard = cardPrefab.getComponent("CCard");
        cCard.index = i;
        var p = this.getPositionCard(cCard);
        var r = this.getRotationCard(cCard);
        cardPrefab.setPosition(p);
        cardPrefab.angle = -r;
      }
    } else {
      console.error("don't have GameControler in Player, so can't create newCard");
    }
  },
  getNumCard: function getNumCard() {
    if (this.player) {
      if (this.player.index !== 0) {
        return this._numCard;
      }

      return this.player.cards.length;
    }

    return 1;
  },
  getRotationCard: function getRotationCard(cCard) {
    var index = cCard.index;
    return this.getRotationVia(index);
  },
  getRotationVia: function getRotationVia(index) {
    var num = this.getNumCard();
    var y = 0;
    var startX = -95;
    var endX = 75; // var startX = -60;
    // var endX = 48;

    var maxOffsetX = num < 7 ? 20 : 50;
    var offset = (endX - startX) / (num - 1);
    if (offset > maxOffsetX) offset = maxOffsetX; //re-call startX;

    startX = startX + (endX - startX - offset * (num - 1)) / 2;
    return startX + offset * index;
  },

  /**
   *
   * @param cCard {CCard}
   */
  getPositionCard: function getPositionCard(cCard) {
    var index = cCard.index;
    return this.getPositionVia(index);
  },
  getPositionVia: function getPositionVia(index) {
    var num = this.getNumCard();
    var y = 0;
    var startX = -250;
    var endX = 250;
    var maxOffsetX = 5;
    var offset = (endX - startX) / (num - 1);
    if (offset > maxOffsetX) offset = maxOffsetX; //re-call startX;

    startX = startX + (endX - startX - offset * (num - 1)) / 2;
    return this.getCirclePos(new cc.Vec2(startX + offset * index, y));
  },

  /**
   *
   * @param pos {cc.Vec2}
   */
  getCirclePos: function getCirclePos(pos) {
    var x = pos.x;
    pos.y = -1 / 100 * (x * x) / 1000 - 440;
    return pos;
  },
  onPass: function onPass() {
    this.setMyTurn(false);

    if (this.imgPass) {
      this.imgPass.active = true;
      this.avatar.getComponent("CCircleAvatar").img.node.color = cc.Color.GRAY;
      this.node.runAction(cc.sequence(cc.delayTime(2), cc.callFunc(function () {
        this.imgPass.active = false;
        this.avatar.getComponent("CCircleAvatar").img.node.color = cc.Color.WHITE;
      }.bind(this))));
    }
  },

  /**
   *
   * @param event {cc.EventTouch}
   * @param card {Card}
   */
  onTouchCard: function onTouchCard(event, card, owner) {
    switch (event.type) {
      case cc.Node.EventType.TOUCH_START:
        break;

      case cc.Node.EventType.TOUCH_MOVE:
        card.isDraging = true;
        var pos = card.node.getParent().convertToNodeSpaceAR(event.getLocation());
        card.node.setPosition(pos);
        break;

      case cc.Node.EventType.TOUCH_END:
        card.isDraging = false;
        card.isSelected = !card.isSelected;
        card.node.setPosition(this.getPositionCard(card));
        break;

      case cc.Node.EventType.TOUCH_CANCEL:
        card.isDraging = false;
        card.node.setPosition(this.getPositionCard(card));
        break;
    }
  },
  onEnterTurn: function onEnterTurn() {
    if (this.player.index === 0) return;
    this.progressBar.progress = 1;
    this.setMyTurn(true);
  },
  setMyTurn: function setMyTurn(b) {
    var index = 1;
    console.log("come:" + index++);
    this._isMyTurn = b;
    console.log("come:" + index++);
    this.progressBar.node.active = b;
    console.log("come:" + index++);
    var len = this.cards.length;

    for (var i = 0; i < len; i++) {
      var cardPrefab = this.cards[i];
      var cCard = cardPrefab.getComponent("CCard");
      cCard.setSuggest(true);
    }

    console.log("come:" + index++);

    if (!b) {
      this.headProgressBar.stopSystem();
    } else {
      this.headProgressBar.resetSystem();
    }

    console.log("come:" + index++); // this.headProgressBar.active = b;
  },
  onSuggestCard: function onSuggestCard(cards) {
    var isContain = function isContain(card) {
      var l = cards.length;

      for (var i = 0; i < l; i++) {
        if (cards[i].id === card.id) {
          return true;
        }
      }

      return false;
    };

    var len = this.cards.length;

    for (var i = 0; i < len; i++) {
      var cardPrefab = this.cards[i];
      var cCard = cardPrefab.getComponent("CCard");
      cCard.setSuggest(isContain(cCard.card));
    }
  }
});
module.exports = CPlayer;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcQ1BsYXllci5qcyJdLCJuYW1lcyI6WyJUeXBlcyIsInJlcXVpcmUiLCJVdGlsaXR5IiwiQ1BsYXllciIsImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiYXZhdGFyIiwiTm9kZSIsImRpc3BsYXlOYW1lIiwiTGFiZWwiLCJnb2xkIiwic3ByaXRlQXZhdGFyIiwidHlwZSIsIlNwcml0ZUZyYW1lIiwibGF5ZXJDYXJkIiwiaW1nUGFzcyIsInByb2dyZXNzQmFyIiwiUHJvZ3Jlc3NCYXIiLCJoZWFkUHJvZ3Jlc3NCYXIiLCJQYXJ0aWNsZVN5c3RlbSIsImJhY2tDYXJkIiwiU3ByaXRlIiwibGJOdW1DYXJkIiwiY3RvciIsInBsYXllciIsImdhbWVDb250cm9sbGVyIiwiY2FyZHMiLCJfaXNNeVR1cm4iLCJfbnVtQ2FyZCIsIm9uTG9hZCIsInNldE15VHVybiIsInN0cmluZyIsIm5hbWUiLCJmb3JtYXRNb25leUZ1bGwiLCJfbG9hZENhcmRzIiwiY29uc29sZSIsImVycm9yIiwiYWN0aXZlIiwic3RhcnQiLCJ1cGRhdGUiLCJkdCIsInByb2dyZXNzIiwicCIsIlZlYzIiLCJyb3RhdGUiLCJub2RlIiwic2V0UG9zaXRpb24iLCJzZXRHYW1lQ29udHJvbGxlciIsInNldFBsYXllciIsImluZGV4IiwidXBkYXRlVUkiLCJpIiwibGVuZ3RoIiwiYyIsImNhcmRQcmVmYWIiLCJnZXROZXdDYXJkIiwiY0NhcmQiLCJnZXRDb21wb25lbnQiLCJzZXRDYXJkIiwic2V0T3duZXIiLCJnZXRQb3NpdGlvbkNhcmQiLCJyIiwiZ2V0Um90YXRpb25DYXJkIiwiYW5nbGUiLCJhZGRDaGlsZCIsInB1c2giLCJnZXROdW1DYXJkIiwic2V0TGF5ZXJDYXJkIiwib25EaXNjYXJkIiwiY2FyZFByZWZhYnMiLCJpc0NvbnRhaW4iLCJpZCIsImxlbiIsImNhcmQiLCJ1bnNoaWZ0Iiwic3BsaWNlIiwiX3VwZGF0ZVBvc0NhcmRzIiwicG9zIiwiZ2V0UG9zaXRpb24iLCJ4IiwiayIsInNldFBvc2l0aW9uQ2VudGVyIiwibG9nIiwiZ2V0Um90YXRpb25WaWEiLCJudW0iLCJ5Iiwic3RhcnRYIiwiZW5kWCIsIm1heE9mZnNldFgiLCJvZmZzZXQiLCJnZXRQb3NpdGlvblZpYSIsImdldENpcmNsZVBvcyIsIm9uUGFzcyIsImltZyIsImNvbG9yIiwiQ29sb3IiLCJHUkFZIiwicnVuQWN0aW9uIiwic2VxdWVuY2UiLCJkZWxheVRpbWUiLCJjYWxsRnVuYyIsIldISVRFIiwiYmluZCIsIm9uVG91Y2hDYXJkIiwiZXZlbnQiLCJvd25lciIsIkV2ZW50VHlwZSIsIlRPVUNIX1NUQVJUIiwiVE9VQ0hfTU9WRSIsImlzRHJhZ2luZyIsImdldFBhcmVudCIsImNvbnZlcnRUb05vZGVTcGFjZUFSIiwiZ2V0TG9jYXRpb24iLCJUT1VDSF9FTkQiLCJpc1NlbGVjdGVkIiwiVE9VQ0hfQ0FOQ0VMIiwib25FbnRlclR1cm4iLCJiIiwic2V0U3VnZ2VzdCIsInN0b3BTeXN0ZW0iLCJyZXNldFN5c3RlbSIsIm9uU3VnZ2VzdENhcmQiLCJsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQW5COztBQUNBLElBQUlDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBRUEsSUFBSUUsT0FBTyxHQUFHQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNuQixhQUFTRCxFQUFFLENBQUNFLFNBRE87QUFHbkJDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxNQUFNLEVBQUNKLEVBQUUsQ0FBQ0ssSUFERjtBQUVSQyxJQUFBQSxXQUFXLEVBQUNOLEVBQUUsQ0FBQ08sS0FGUDtBQUdSQyxJQUFBQSxJQUFJLEVBQUNSLEVBQUUsQ0FBQ08sS0FIQTtBQUlSRSxJQUFBQSxZQUFZLEVBQUM7QUFDVCxpQkFBUSxFQURDO0FBRVRDLE1BQUFBLElBQUksRUFB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MkI7QUFDdkIsaUJBQU8sSUFBUDtBQUNIO0FBQ0o7O0FBQ0QsYUFBTyxLQUFQO0FBQ0gsS0FSRDs7QUFTQSxRQUFJQyxHQUFHLEdBQUcsS0FBSzlDLEtBQUwsQ0FBVzBCLE1BQXJCOztBQUNBLFNBQUssSUFBSUQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3FCLEdBQXBCLEVBQXlCckIsQ0FBQyxFQUExQixFQUE4QjtBQUMxQixVQUFJRyxVQUFVLEdBQUcsS0FBSzVCLEtBQUwsQ0FBV3lCLENBQVgsQ0FBakI7QUFDQSxVQUFJSyxLQUFLLEdBQUdGLFVBQVUsQ0FBQ0csWUFBWCxDQUF3QixPQUF4QixDQUFaO0FBQ0FELE1BQUFBLEtBQUssQ0FBQzhELFVBQU4sQ0FBaUJoRCxTQUFTLENBQUNkLEtBQUssQ0FBQ2lCLElBQVAsQ0FBMUI7QUFDSDtBQUNKO0FBclVrQixDQUFULENBQWQ7QUF3VUFrRCxNQUFNLENBQUNDLE9BQVAsR0FBaUIzSCxPQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFR5cGVzID0gcmVxdWlyZShcIlR5cGVzXCIpO1xyXG52YXIgVXRpbGl0eSA9IHJlcXVpcmUoXCJVdGlsaXR5XCIpO1xyXG5cclxudmFyIENQbGF5ZXIgPSBjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGF2YXRhcjpjYy5Ob2RlLFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOmNjLkxhYmVsLFxyXG4gICAgICAgIGdvbGQ6Y2MuTGFiZWwsXHJcbiAgICAgICAgc3ByaXRlQXZhdGFyOntcclxuICAgICAgICAgICAgZGVmYXVsdDpbXSxcclxuICAgICAgICAgICAgdHlwZTpbY2MuU3ByaXRlRnJhbWVdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYXllckNhcmQ6e1xyXG4gICAgICAgICAgICBkZWZhdWx0Om51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6Y2MuTm9kZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW1nUGFzczp7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbCxcclxuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcm9ncmVzc0Jhcjp7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbCxcclxuICAgICAgICAgICAgdHlwZTpjYy5Qcm9ncmVzc0JhclxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGVhZFByb2dyZXNzQmFyOntcclxuICAgICAgICAgICAgZGVmYXVsdDpudWxsLFxyXG4gICAgICAgICAgICB0eXBlOmNjLlBhcnRpY2xlU3lzdGVtXHJcbiAgICAgICAgfSxcclxuICAgICAgICBiYWNrQ2FyZDp7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbCxcclxuICAgICAgICAgICAgdHlwZTpjYy5TcHJpdGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxiTnVtQ2FyZDp7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbCxcclxuICAgICAgICAgICAgdHlwZTpjYy5MYWJlbFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjdG9yOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtQbGF5ZXJ9Ki9cclxuICAgICAgICB0aGlzLnBsYXllciA9IG51bGw7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtHYW1lQ29udHJvbGxlcn0qL1xyXG4gICAgICAgIHRoaXMuZ2FtZUNvbnRyb2xsZXIgPSBudWxsO1xyXG4gICAgICAgIC8qKiBAdHlwZSB7W2NhcmRQcmVmYWJdfSovXHJcbiAgICAgICAgdGhpcy5jYXJkcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2lzTXlUdXJuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fbnVtQ2FyZCA9IDA7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdGhpcy5zZXRNeVR1cm4odGhpcy5faXNNeVR1cm4pO1xyXG4gICAgICAgIGlmKHRoaXMucGxheWVyKXtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5TmFtZS5zdHJpbmcgPSB0aGlzLnBsYXllci5uYW1lO1xyXG4gICAgICAgICAgICB0aGlzLmdvbGQuc3RyaW5nID0gVXRpbGl0eS5mb3JtYXRNb25leUZ1bGwodGhpcy5wbGF5ZXIuZ29sZCk7XHJcblxyXG4gICAgICAgICAgICAvLyB2YXIgY2lyY2xlQXZhdGFyID0gdGhpcy5hdmF0YXIuZ2V0Q29tcG9uZW50KFwiQ0NpcmNsZUF2YXRhclwiKTtcclxuICAgICAgICAgICAgLy8gY2lyY2xlQXZhdGFyLmNoYW5nZUF2YXRhcih0aGlzLnNwcml0ZUF2YXRhclt0aGlzLnBsYXllci5hdmF0YXJdKTtcclxuXHJcbiAgICAgICAgICAgIC8vbG9hZENhcmRzXHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRDYXJkcygpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwibmVlZCBsb2FkIHNldFBsYXllciBpbmZvIG9uTG9hZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5pbWdQYXNzKXtcclxuICAgICAgICAgICAgdGhpcy5pbWdQYXNzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdGFydDpmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGUgKGR0KSB7XHJcbiAgICAgICAgaWYodGhpcy5faXNNeVR1cm4pe1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3NCYXIgPSB0aGlzLnByb2dyZXNzQmFyO1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBwcm9ncmVzc0Jhci5wcm9ncmVzcztcclxuICAgICAgICAgICAgaWYocHJvZ3Jlc3MgPiAwKXtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzIC09IChkdCAqIDAuMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXIucHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuXHJcbiAgICAgICAgICAgIHZhciBwID0gbmV3IGNjLlZlYzIoMCw3NSk7XHJcbiAgICAgICAgICAgIHAgPSBwLnJvdGF0ZShwcm9ncmVzcyAqIDIgKiAzLjE0KTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkUHJvZ3Jlc3NCYXIubm9kZS5zZXRQb3NpdGlvbihwKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNldEdhbWVDb250cm9sbGVyOmZ1bmN0aW9uKGdhbWVDb250cm9sbGVyKXtcclxuICAgICAgICB0aGlzLmdhbWVDb250cm9sbGVyID0gZ2FtZUNvbnRyb2xsZXI7XHJcbiAgICB9LFxyXG4gICAgc2V0UGxheWVyOmZ1bmN0aW9uIChwbGF5ZXIpIHtcclxuICAgICAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcclxuICAgICAgICBpZih0aGlzLnBsYXllci5pbmRleCAhPT0gMCl7XHJcbiAgICAgICAgICAgIHRoaXMuX251bUNhcmQgPSAxMTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlVUk6ZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIH0sXHJcbiAgICBfbG9hZENhcmRzOmZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZih0aGlzLmdhbWVDb250cm9sbGVyKXtcclxuICAgICAgICAgICAgdmFyIGNhcmRzID0gdGhpcy5wbGF5ZXIuY2FyZHM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FyZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjID0gY2FyZHNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FyZFByZWZhYiA9IHRoaXMuZ2FtZUNvbnRyb2xsZXIuZ2V0TmV3Q2FyZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNDYXJkID0gY2FyZFByZWZhYi5nZXRDb21wb25lbnQoXCJDQ2FyZFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjQ2FyZC5zZXRDYXJkKGMpO1xyXG4gICAgICAgICAgICAgICAgY0NhcmQuaW5kZXggPSAoaSk7XHJcbiAgICAgICAgICAgICAgICBjQ2FyZC5zZXRPd25lcih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHRoaXMuZ2V0UG9zaXRpb25DYXJkKGNDYXJkKTtcclxuICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5nZXRSb3RhdGlvbkNhcmQoY0NhcmQpO1xyXG4gICAgICAgICAgICAgICAgY2FyZFByZWZhYi5zZXRQb3NpdGlvbihwKTtcclxuICAgICAgICAgICAgICAgIGNhcmRQcmVmYWIuYW5nbGUgPSAoLXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllckNhcmQuYWRkQ2hpbGQoY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmRzLnB1c2goY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sYk51bUNhcmQuc3RyaW5nID0gdGhpcy5nZXROdW1DYXJkKCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJkb24ndCBoYXZlIEdhbWVDb250cm9sZXIgaW4gUGxheWVyLCBzbyBjYW4ndCBjcmVhdGUgbmV3Q2FyZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0TGF5ZXJDYXJkOmZ1bmN0aW9uKGxheWVyQ2FyZCl7XHJcbiAgICAgICAgdGhpcy5sYXllckNhcmQgPSBsYXllckNhcmQ7XHJcbiAgICB9LFxyXG4gICAgb25EaXNjYXJkOmZ1bmN0aW9uKGNhcmRzKXtcclxuICAgICAgICB0aGlzLnNldE15VHVybihmYWxzZSk7XHJcbiAgICAgICAgaWYodGhpcy5sYXllckNhcmQgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ5b3UgbmVlZCBhZGQgbGF5ZXJDYXJkIHRvIHBsYXllciBiZWZvcmVEaXNjYXJkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjYXJkUHJlZmFicyA9IFtdO1xyXG4gICAgICAgIGlmKHRoaXMucGxheWVyICYmIHRoaXMucGxheWVyLmluZGV4ID09PSAwKXtcclxuICAgICAgICAgICAgdmFyIGlzQ29udGFpbiA9IGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYy5pZD09PSBjYXJkc1tpXS5pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMuY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJkUHJlZmFiID0gdGhpcy5jYXJkc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBjQ2FyZCA9IGNhcmRQcmVmYWIuZ2V0Q29tcG9uZW50KFwiQ0NhcmRcIik7XHJcbiAgICAgICAgICAgICAgICBpZihpc0NvbnRhaW4oY0NhcmQuY2FyZCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRQcmVmYWJzLnVuc2hpZnQoY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJkcy5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5jYXJkcy5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVQb3NDYXJkcygpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5ub2RlLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIHBvcy54ICs9IHRoaXMuYmFja0NhcmQubm9kZS5nZXRQb3NpdGlvbigpLng7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY2FyZHMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJkUHJlZmFiID0gdGhpcy5nYW1lQ29udHJvbGxlci5nZXROZXdDYXJkKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY0NhcmQgPSBjYXJkUHJlZmFiLmdldENvbXBvbmVudChcIkNDYXJkXCIpO1xyXG4gICAgICAgICAgICAgICAgY0NhcmQuc2V0Q2FyZChjYXJkc1trXSk7XHJcbiAgICAgICAgICAgICAgICBjYXJkUHJlZmFiLmFuZ2xlID0gMDtcclxuICAgICAgICAgICAgICAgIGNDYXJkLnNldFBvc2l0aW9uQ2VudGVyKHBvcyk7XHJcbiAgICAgICAgICAgICAgICBjYXJkUHJlZmFicy5wdXNoKGNhcmRQcmVmYWIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllckNhcmQuYWRkQ2hpbGQoY2FyZFByZWZhYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbnVtQ2FyZCAtPSBjYXJkcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGJOdW1DYXJkLnN0cmluZyA9IHRoaXMuZ2V0TnVtQ2FyZCgpO1xyXG4gICAgICAgIHJldHVybiBjYXJkUHJlZmFicztcclxuICAgIH0sXHJcbiAgICBfdXBkYXRlUG9zQ2FyZHM6ZnVuY3Rpb24oKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIl91cGRhdGVQb3NDYXJkc1wiKTtcclxuICAgICAgICBpZih0aGlzLmdhbWVDb250cm9sbGVyKXtcclxuICAgICAgICAgICAgdmFyIGNhcmRzID0gdGhpcy5jYXJkcztcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYXJkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcmRQcmVmYWIgPSBjYXJkc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBjQ2FyZCA9IGNhcmRQcmVmYWIuZ2V0Q29tcG9uZW50KFwiQ0NhcmRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgY0NhcmQuaW5kZXggPSAoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSB0aGlzLmdldFBvc2l0aW9uQ2FyZChjQ2FyZCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuZ2V0Um90YXRpb25DYXJkKGNDYXJkKTtcclxuICAgICAgICAgICAgICAgIGNhcmRQcmVmYWIuc2V0UG9zaXRpb24ocCk7XHJcbiAgICAgICAgICAgICAgICBjYXJkUHJlZmFiLmFuZ2xlID0gKC1yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZG9uJ3QgaGF2ZSBHYW1lQ29udHJvbGVyIGluIFBsYXllciwgc28gY2FuJ3QgY3JlYXRlIG5ld0NhcmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBnZXROdW1DYXJkOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5ZXIpe1xyXG4gICAgICAgICAgICBpZih0aGlzLnBsYXllci5pbmRleCAhPT0gMCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbnVtQ2FyZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH0sXHJcbiAgICBnZXRSb3RhdGlvbkNhcmQ6ZnVuY3Rpb24gKGNDYXJkKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gY0NhcmQuaW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Um90YXRpb25WaWEoaW5kZXgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRSb3RhdGlvblZpYTpmdW5jdGlvbihpbmRleCl7XHJcbiAgICAgICAgdmFyIG51bSA9IHRoaXMuZ2V0TnVtQ2FyZCgpO1xyXG4gICAgICAgIHZhciB5ID0gMDtcclxuICAgICAgICB2YXIgc3RhcnRYID0gLTk1O1xyXG4gICAgICAgIHZhciBlbmRYID0gNzU7XHJcbiAgICAgICAgLy8gdmFyIHN0YXJ0WCA9IC02MDtcclxuICAgICAgICAvLyB2YXIgZW5kWCA9IDQ4O1xyXG4gICAgICAgIHZhciBtYXhPZmZzZXRYID0gbnVtIDwgNyA/IDIwIDogNTA7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IChlbmRYIC0gc3RhcnRYKSAvIChudW0gLSAxKTtcclxuICAgICAgICBpZihvZmZzZXQgPiBtYXhPZmZzZXRYKSBvZmZzZXQgPSBtYXhPZmZzZXRYO1xyXG4gICAgICAgIC8vcmUtY2FsbCBzdGFydFg7XHJcbiAgICAgICAgc3RhcnRYID0gc3RhcnRYICsgIChlbmRYIC0gc3RhcnRYIC0gKG9mZnNldCAqKG51bSAtIDEpKSkvMjtcclxuICAgICAgICByZXR1cm4gc3RhcnRYICsgKG9mZnNldCAqIGluZGV4KTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY0NhcmQge0NDYXJkfVxyXG4gICAgICovXHJcbiAgICBnZXRQb3NpdGlvbkNhcmQ6ZnVuY3Rpb24gKGNDYXJkKXtcclxuICAgICAgICB2YXIgaW5kZXggPSBjQ2FyZC5pbmRleDtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQb3NpdGlvblZpYShpbmRleCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0UG9zaXRpb25WaWE6ZnVuY3Rpb24oaW5kZXgpe1xyXG4gICAgICAgIHZhciBudW0gPSB0aGlzLmdldE51bUNhcmQoKTtcclxuICAgICAgICB2YXIgeSA9IDA7XHJcbiAgICAgICAgdmFyIHN0YXJ0WCA9IC0gMjUwO1xyXG4gICAgICAgIHZhciBlbmRYID0gMjUwO1xyXG4gICAgICAgIHZhciBtYXhPZmZzZXRYID0gNTtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gKGVuZFggLSBzdGFydFgpIC8gKG51bSAtIDEpO1xyXG4gICAgICAgIGlmKG9mZnNldCA+IG1heE9mZnNldFgpIG9mZnNldCA9IG1heE9mZnNldFg7XHJcbiAgICAgICAgLy9yZS1jYWxsIHN0YXJ0WDtcclxuICAgICAgICBzdGFydFggPSBzdGFydFggKyAgKGVuZFggLSBzdGFydFggLSAob2Zmc2V0ICoobnVtIC0gMSkpKS8yO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENpcmNsZVBvcyhuZXcgY2MuVmVjMihzdGFydFggKyAob2Zmc2V0ICogaW5kZXgpLCB5KSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBvcyB7Y2MuVmVjMn1cclxuICAgICAqL1xyXG4gICAgZ2V0Q2lyY2xlUG9zOmZ1bmN0aW9uIChwb3MpIHtcclxuICAgICAgICB2YXIgeCA9IHBvcy54O1xyXG4gICAgICAgIHBvcy55ID0gKCgtMS8xMDAqKHgqeCkpLzEwMDAgLSA0NDApO1xyXG4gICAgICAgIHJldHVybiBwb3M7XHJcbiAgICB9LFxyXG4gICAgb25QYXNzOmZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNldE15VHVybihmYWxzZSk7XHJcbiAgICAgICAgaWYodGhpcy5pbWdQYXNzKXtcclxuICAgICAgICAgICAgdGhpcy5pbWdQYXNzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyLmdldENvbXBvbmVudChcIkNDaXJjbGVBdmF0YXJcIikuaW1nLm5vZGUuY29sb3IgPSBjYy5Db2xvci5HUkFZO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUucnVuQWN0aW9uKGNjLnNlcXVlbmNlKFxyXG4gICAgICAgICAgICAgICAgY2MuZGVsYXlUaW1lKDIpLFxyXG4gICAgICAgICAgICAgICAgY2MuY2FsbEZ1bmMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW1nUGFzcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF2YXRhci5nZXRDb21wb25lbnQoXCJDQ2lyY2xlQXZhdGFyXCIpLmltZy5ub2RlLmNvbG9yID0gY2MuQ29sb3IuV0hJVEU7XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpXHJcbiAgICAgICAgICAgICkpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudCB7Y2MuRXZlbnRUb3VjaH1cclxuICAgICAqIEBwYXJhbSBjYXJkIHtDYXJkfVxyXG4gICAgICovXHJcbiAgICBvblRvdWNoQ2FyZDpmdW5jdGlvbiAoZXZlbnQsY2FyZCxvd25lcikge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJUOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfTU9WRTpcclxuICAgICAgICAgICAgICAgIGNhcmQuaXNEcmFnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBjYXJkLm5vZGUuZ2V0UGFyZW50KCkuY29udmVydFRvTm9kZVNwYWNlQVIoZXZlbnQuZ2V0TG9jYXRpb24oKSk7XHJcbiAgICAgICAgICAgICAgICBjYXJkLm5vZGUuc2V0UG9zaXRpb24ocG9zKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORDpcclxuICAgICAgICAgICAgICAgIGNhcmQuaXNEcmFnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjYXJkLmlzU2VsZWN0ZWQgPSAhY2FyZC5pc1NlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgY2FyZC5ub2RlLnNldFBvc2l0aW9uKHRoaXMuZ2V0UG9zaXRpb25DYXJkKGNhcmQpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTDpcclxuICAgICAgICAgICAgICAgIGNhcmQuaXNEcmFnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjYXJkLm5vZGUuc2V0UG9zaXRpb24odGhpcy5nZXRQb3NpdGlvbkNhcmQoY2FyZCkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uRW50ZXJUdXJuOmZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZih0aGlzLnBsYXllci5pbmRleCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIucHJvZ3Jlc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuc2V0TXlUdXJuKHRydWUpO1xyXG4gICAgfSxcclxuICAgIHNldE15VHVybjpmdW5jdGlvbiAoYikge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDE7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjb21lOlwiICsgaW5kZXgrKyk7XHJcbiAgICAgICAgdGhpcy5faXNNeVR1cm4gPSBiO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tZTpcIiArIGluZGV4KyspO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIubm9kZS5hY3RpdmUgPSBiO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tZTpcIiArIGluZGV4KyspO1xyXG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmNhcmRzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjYXJkUHJlZmFiID0gdGhpcy5jYXJkc1tpXTtcclxuICAgICAgICAgICAgdmFyIGNDYXJkID0gY2FyZFByZWZhYi5nZXRDb21wb25lbnQoXCJDQ2FyZFwiKTtcclxuICAgICAgICAgICAgY0NhcmQuc2V0U3VnZ2VzdCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjb21lOlwiICsgaW5kZXgrKyk7XHJcbiAgICAgICAgaWYoIWIpe1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRQcm9ncmVzc0Jhci5zdG9wU3lzdGVtKCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZFByb2dyZXNzQmFyLnJlc2V0U3lzdGVtKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tZTpcIiArIGluZGV4KyspO1xyXG4gICAgICAgIC8vIHRoaXMuaGVhZFByb2dyZXNzQmFyLmFjdGl2ZSA9IGI7XHJcbiAgICB9LFxyXG4gICAgb25TdWdnZXN0Q2FyZDpmdW5jdGlvbiAoY2FyZHMpIHtcclxuICAgICAgICB2YXIgaXNDb250YWluID0gZnVuY3Rpb24gKGNhcmQpIHtcclxuICAgICAgICAgICAgdmFyIGwgPSBjYXJkcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjYXJkc1tpXS5pZCA9PT0gY2FyZC5pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuY2FyZHMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGNhcmRQcmVmYWIgPSB0aGlzLmNhcmRzW2ldO1xyXG4gICAgICAgICAgICB2YXIgY0NhcmQgPSBjYXJkUHJlZmFiLmdldENvbXBvbmVudChcIkNDYXJkXCIpO1xyXG4gICAgICAgICAgICBjQ2FyZC5zZXRTdWdnZXN0KGlzQ29udGFpbihjQ2FyZC5jYXJkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbn0pO1xyXG5tb2R1bGUuZXhwb3J0cyA9IENQbGF5ZXI7XHJcbiJdfQ==